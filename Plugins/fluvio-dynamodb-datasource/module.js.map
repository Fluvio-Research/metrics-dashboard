{"version":3,"file":"module.js","mappings":"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","sources":["webpack://fluvio-dynamodb-datasource/external amd \"@grafana/ui\"","webpack://fluvio-dynamodb-datasource/external amd \"@emotion/css\"","webpack://fluvio-dynamodb-datasource/external amd \"rxjs\"","webpack://fluvio-dynamodb-datasource/external amd \"module\"","webpack://fluvio-dynamodb-datasource/external amd \"@grafana/runtime\"","webpack://fluvio-dynamodb-datasource/external amd \"@grafana/data\"","webpack://fluvio-dynamodb-datasource/external amd \"react\"","webpack://fluvio-dynamodb-datasource/webpack/bootstrap","webpack://fluvio-dynamodb-datasource/webpack/runtime/compat get default export","webpack://fluvio-dynamodb-datasource/webpack/runtime/define property getters","webpack://fluvio-dynamodb-datasource/webpack/runtime/hasOwnProperty shorthand","webpack://fluvio-dynamodb-datasource/webpack/runtime/make namespace object","webpack://fluvio-dynamodb-datasource/webpack/runtime/publicPath","webpack://fluvio-dynamodb-datasource/./node_modules/grafana-public-path.js","webpack://fluvio-dynamodb-datasource/./types.ts","webpack://fluvio-dynamodb-datasource/./datasource.ts","webpack://fluvio-dynamodb-datasource/./components/ConfigEditor.tsx","webpack://fluvio-dynamodb-datasource/./components/QueryEditor.tsx","webpack://fluvio-dynamodb-datasource/./module.ts"],"sourcesContent":["module.exports = __WEBPACK_EXTERNAL_MODULE__7__;","module.exports = __WEBPACK_EXTERNAL_MODULE__89__;","module.exports = __WEBPACK_EXTERNAL_MODULE__269__;","module.exports = __WEBPACK_EXTERNAL_MODULE__308__;","module.exports = __WEBPACK_EXTERNAL_MODULE__531__;","module.exports = __WEBPACK_EXTERNAL_MODULE__781__;","module.exports = __WEBPACK_EXTERNAL_MODULE__959__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"public/plugins/fluvio-dynamodb-datasource/\";","\nimport amdMetaModule from 'amd-module';\n\n__webpack_public_path__ =\n  amdMetaModule && amdMetaModule.uri\n    ? amdMetaModule.uri.slice(0, amdMetaModule.uri.lastIndexOf('/') + 1)\n    : 'public/plugins/fluvio-dynamodb-datasource/';\n","import { DataSourceJsonData } from '@grafana/data';\nimport { DataQuery } from '@grafana/schema';\n\n// Field mapping configuration for dynamic data transformation\nexport interface FieldMapping {\n  fieldName: string;          // Display name in Grafana\n  sourcePath: string;         // JSONPath to source data (e.g., \"location.lat\", \"nested.array[0].value\")\n  dataType: 'string' | 'number' | 'boolean' | 'time' | 'json';\n  transformation?: string;    // Optional transformation (e.g., \"parseFloat\", \"new Date()\", \"JSON.stringify\")\n}\n\n// Query model sent from Grafana to the backend.\nexport interface DynamoQuery extends DataQuery {\n  // Basic query parameters\n  partiql?: string;\n  table?: string;\n  partitionKeyName?: string;\n  partitionKeyValue?: string;\n  sortKeyName?: string;\n  sortKeyValue?: string;\n  limit?: number;\n  \n  // Query mode state\n  queryMode?: 'partiql' | 'key';\n\n  // Time filtering\n  timeFilterEnabled?: boolean;\n  timestampField?: string;      // Field name to filter on (default: \"timestamp\")\n  timeFrom?: string;            // ISO date string for start time\n  timeTo?: string;              // ISO date string for end time\n  \n  // Dynamic field mapping and transformation\n  fieldMappings?: FieldMapping[];\n  outputFormat?: 'auto' | 'table' | 'geomap' | 'timeseries';\n  \n  // Schema discovery\n  discoverSchema?: boolean;\n}\n\n// Default values for a new query\nexport const DEFAULT_QUERY: Partial<DynamoQuery> = {\n  limit: 100,\n  outputFormat: 'auto',\n  fieldMappings: [],\n  discoverSchema: false,\n  timeFilterEnabled: false,\n  timestampField: 'timestamp',\n  queryMode: 'key',\n};\n\n// Data source configuration options (saved in Grafana)\nexport interface FluvioDataSourceOptions extends DataSourceJsonData {\n  region?: string;\n  endpoint?: string;\n}\n\n// Secure fields stored only in the backend\nexport interface FluvioSecureJsonData {\n  accessKey?: string;\n  secretKey?: string;\n  // Note: sessionToken removed - this plugin is optimized for permanent IAM credentials\n}\n","import {\n  DataSourceInstanceSettings,\n  CoreApp,\n  ScopedVars,\n  AdHocVariableFilter,\n} from '@grafana/data';\nimport { DataSourceWithBackend, getTemplateSrv, TemplateSrv } from '@grafana/runtime';\nimport { DynamoQuery, FluvioDataSourceOptions, DEFAULT_QUERY } from './types';\n\n// Development mode detection\nconst isDevelopmentMode = () => {\n  // Check if we're in development based on various indicators\n  return process.env.NODE_ENV === 'development' || \n         window.location.hostname === 'localhost' ||\n         window.location.hostname === '127.0.0.1' ||\n         window.location.port === '3000';\n};\n\nconst devLog = (message: string, ...args: any[]) => {\n  if (isDevelopmentMode()) {\n    console.log(`🔧 [FLUVIO-DEV] ${message}`, ...args);\n  }\n};\n\nconst devWarn = (message: string, ...args: any[]) => {\n  if (isDevelopmentMode()) {\n    console.warn(`⚠️ [FLUVIO-DEV] ${message}`, ...args);\n  }\n};\n\nconst devError = (message: string, ...args: any[]) => {\n  if (isDevelopmentMode()) {\n    console.error(`❌ [FLUVIO-DEV] ${message}`, ...args);\n  }\n};\n\nexport class DataSource extends DataSourceWithBackend<DynamoQuery, FluvioDataSourceOptions> {\n  instanceSettings: DataSourceInstanceSettings<FluvioDataSourceOptions>;\n  templateSrv: TemplateSrv;\n\n  constructor(instanceSettings: DataSourceInstanceSettings<FluvioDataSourceOptions>) {\n    super(instanceSettings);\n    this.instanceSettings = instanceSettings;\n    this.templateSrv = getTemplateSrv();\n    \n    // Development mode logging\n    if (isDevelopmentMode()) {\n      console.log('🚀 FLUVIO DYNAMODB PLUGIN LOADED IN DEVELOPMENT MODE!');\n      console.log('📅 Load time:', new Date().toISOString());\n      console.log('🔧 Development features enabled: Enhanced logging, cache disabled');\n      devLog('Instance Settings:', instanceSettings);\n      devLog('Plugin URL:', instanceSettings.url);\n      devLog('Plugin ID:', instanceSettings.id);\n      \n      // Validate instance settings in dev mode\n      if (!instanceSettings.url) {\n        devWarn('Plugin URL not configured in instance settings');\n      }\n      if (!instanceSettings.jsonData?.region) {\n        devWarn('AWS region not configured in plugin settings');\n      }\n    } else {\n      console.log('🚀 Fluvio DynamoDB Plugin loaded (Production mode)');\n    }\n  }\n\n  // Default query shown when adding a new panel\n  getDefaultQuery(app: CoreApp): Partial<DynamoQuery> {\n    return DEFAULT_QUERY;\n  }\n\n  // Return false to prevent queries with no input\n  filterQuery(query: DynamoQuery): boolean {\n    return !!query.partiql || !!query.table;\n  }\n\n  // Apply template variables to queries before sending to backend\n  applyTemplateVariables(query: DynamoQuery, scopedVars: ScopedVars, filters?: AdHocVariableFilter[]): DynamoQuery {\n    devLog('applyTemplateVariables called', { timestamp: Date.now() });\n    devLog('Scoped Variables:', scopedVars);\n    devLog('Query before processing:', query);\n    devLog('Ad-hoc filters:', filters);\n\n    // Create enhanced variables object with all Grafana built-in variables\n    const variables = this.buildVariablesContext(scopedVars, query, filters);\n    \n    devLog('Enhanced variables context:', variables);\n\n    // Apply template variable interpolation to all query fields\n    const interpolatedQuery = this.interpolateQueryFields(query, variables);\n    \n    devLog('Query after template variable processing:', interpolatedQuery);\n\n    return interpolatedQuery;\n  }\n\n  /**\n   * Build comprehensive variables context including Grafana built-ins and custom variables\n   */\n  private buildVariablesContext(scopedVars: ScopedVars, query: DynamoQuery, filters?: AdHocVariableFilter[]) {\n    const { fromUnix, toUnix, fromIso, toIso } = this.resolveTimeRange(scopedVars, query);\n    \n    // Start with scoped variables (includes custom dashboard variables)\n    const variables = { ...scopedVars };\n\n    // Add/override Grafana built-in time variables\n    variables.__from = { value: fromUnix.toString(), text: fromUnix.toString() };\n    variables.__to = { value: toUnix.toString(), text: toUnix.toString() };\n    variables.__fromIso = { value: fromIso, text: fromIso };\n    variables.__toIso = { value: toIso, text: toIso };\n    \n    // Add interval variables (these come from Grafana's time range)\n    const timeRange = toUnix - fromUnix;\n    const intervalSeconds = Math.max(1, Math.floor(timeRange / 1000)); // At least 1 second\n    variables.__interval = { value: `${intervalSeconds}s`, text: `${intervalSeconds}s` };\n    variables.__interval_ms = { value: (intervalSeconds * 1000).toString(), text: (intervalSeconds * 1000).toString() };\n\n    // Build enhanced __timeFilter for PartiQL queries\n    const timestampField = this.interpolateString(query.timestampField || 'timestamp', variables);\n    const quotedTimeField = this.formatPartiqlIdentifier(timestampField);\n    \n    if (query.timeFilterEnabled) {\n      // Create flexible time filter that works with different timestamp formats\n      const timeFilterConditions = [\n        `${quotedTimeField} BETWEEN ${fromUnix} AND ${toUnix}`, // Unix timestamp\n        `${quotedTimeField} BETWEEN '${fromIso}' AND '${toIso}'`, // ISO string\n        `CAST(${quotedTimeField} AS NUMBER) BETWEEN ${fromUnix} AND ${toUnix}` // Cast to number if needed\n      ];\n      \n      const timeFilterValue = timeFilterConditions[0]; // Use Unix timestamp as primary\n      variables.__timeFilter = { value: timeFilterValue, text: timeFilterValue };\n      \n      // Additional time filter variants for different use cases\n      variables.__timeFilterIso = { \n        value: `${quotedTimeField} BETWEEN '${fromIso}' AND '${toIso}'`, \n        text: `${quotedTimeField} BETWEEN '${fromIso}' AND '${toIso}'` \n      };\n      variables.__timeFilterMs = { \n        value: `${quotedTimeField} BETWEEN ${fromUnix * 1000} AND ${toUnix * 1000}`, \n        text: `${quotedTimeField} BETWEEN ${fromUnix * 1000} AND ${toUnix * 1000}` \n      };\n      \n      devLog('Time filter created:', {\n        field: quotedTimeField,\n        from: fromIso,\n        to: toIso,\n        filter: timeFilterValue\n      });\n    } else {\n      variables.__timeFilter = { value: '1=1', text: '1=1' }; // Always true condition\n      variables.__timeFilterIso = { value: '1=1', text: '1=1' };\n      variables.__timeFilterMs = { value: '1=1', text: '1=1' };\n      devLog('Time filter disabled, using 1=1');\n    }\n\n    // Add ad-hoc filter variables if present\n    if (filters && filters.length > 0) {\n      const adhocConditions = filters.map(filter => {\n        const quotedKey = this.formatPartiqlIdentifier(filter.key);\n        const operator = this.mapFilterOperator(filter.operator);\n        const value = this.formatFilterValue(filter.value, filter.operator);\n        return `${quotedKey} ${operator} ${value}`;\n      }).join(' AND ');\n      \n      variables.__adhocFilters = { value: adhocConditions, text: adhocConditions };\n      devLog('Ad-hoc filters created:', adhocConditions);\n    } else {\n      variables.__adhocFilters = { value: '1=1', text: '1=1' };\n    }\n\n    return variables;\n  }\n\n  /**\n   * Interpolate template variables in all query fields\n   */\n  private interpolateQueryFields(query: DynamoQuery, variables: ScopedVars): DynamoQuery {\n    return {\n      ...query,\n      // Time fields (already processed in buildVariablesContext)\n      timeFrom: variables.__fromIso?.value || query.timeFrom,\n      timeTo: variables.__toIso?.value || query.timeTo,\n      \n      // PartiQL query with comprehensive variable support\n      partiql: query.partiql ? this.interpolatePartiQLQuery(query.partiql, variables) : query.partiql,\n      \n      // Table and key fields with variable support\n      table: this.interpolateString(query.table, variables),\n      partitionKeyName: this.interpolateString(query.partitionKeyName, variables),\n      partitionKeyValue: this.interpolateString(query.partitionKeyValue, variables),\n      sortKeyName: this.interpolateString(query.sortKeyName, variables),\n      sortKeyValue: this.interpolateString(query.sortKeyValue, variables),\n      timestampField: this.interpolateString(query.timestampField, variables),\n      \n      // Field mappings with variable support\n      fieldMappings: query.fieldMappings?.map((mapping) => ({\n        ...mapping,\n        sourcePath: this.interpolateString(mapping.sourcePath, variables) || mapping.sourcePath,\n        fieldName: this.interpolateString(mapping.fieldName, variables) || mapping.fieldName,\n      })) || query.fieldMappings,\n    };\n  }\n\n  /**\n   * Enhanced PartiQL query interpolation with special handling for multi-value variables\n   */\n  private interpolatePartiQLQuery(partiql: string, variables: ScopedVars): string {\n    const originalQuery = partiql;\n    \n    // First pass: Handle multi-value variables with custom formatting\n    let processedQuery = this.templateSrv.replace(partiql, variables, (value: any, variable: any) => {\n      if (Array.isArray(value)) {\n        // Handle multi-value variables for PartiQL\n        if (variable && typeof variable === 'object' && variable.multi) {\n          // For PartiQL IN clauses, format as ('value1', 'value2', 'value3')\n          const formattedValues = value.map(v => {\n            // Check if value is already quoted or is a number\n            if (typeof v === 'number' || /^\\d+$/.test(v)) {\n              return v.toString();\n            }\n            // Add quotes for string values, escape existing quotes\n            return `'${v.toString().replace(/'/g, \"''\")}'`;\n          }).join(', ');\n          return `(${formattedValues})`;\n        }\n      }\n      \n      // Single value or non-multi variable - use default formatting\n      if (typeof value === 'string' && !value.includes(\"'\") && !/^\\d+$/.test(value)) {\n        // Auto-quote string values that aren't already quoted and aren't numbers\n        return `'${value}'`;\n      }\n      \n      return value;\n    });\n\n    devLog('PartiQL interpolation:', {\n      original: originalQuery,\n      processed: processedQuery,\n      variables: Object.keys(variables)\n    });\n\n    return processedQuery;\n  }\n\n  /**\n   * Safe string interpolation with null/undefined handling\n   */\n  private interpolateString(value: string | undefined, variables: ScopedVars): string | undefined {\n    if (!value) {\n      return value;\n    }\n    \n    try {\n      return this.templateSrv.replace(value, variables);\n    } catch (error) {\n      devError('Error interpolating string:', error, { value, variables: Object.keys(variables) });\n      return value; // Return original value if interpolation fails\n    }\n  }\n\n\n\n  private resolveTimeRange(scopedVars: ScopedVars, query: DynamoQuery) {\n    const now = Date.now();\n    const defaultFrom = now - 24 * 60 * 60 * 1000;\n    const defaultTo = now;\n\n    let fromMs: number | undefined;\n    let toMs: number | undefined;\n\n    // Only use time from Grafana time picker when available\n    if (scopedVars.__from?.value !== undefined) {\n      fromMs = this.coerceToMillis(scopedVars.__from.value);\n    }\n    if (scopedVars.__to?.value !== undefined) {\n      toMs = this.coerceToMillis(scopedVars.__to.value);\n    }\n\n    // Check query object if scopedVars don't have time\n    if (!fromMs && query.timeFrom) {\n      fromMs = this.coerceToMillis(query.timeFrom);\n    }\n    if (!toMs && query.timeTo) {\n      toMs = this.coerceToMillis(query.timeTo);\n    }\n\n    // Fallback to defaults\n    fromMs = fromMs ?? defaultFrom;\n    toMs = toMs ?? defaultTo;\n\n    const from = Math.min(fromMs, toMs);\n    const to = Math.max(fromMs, toMs);\n\n    return {\n      fromUnix: Math.floor(from / 1000),\n      toUnix: Math.floor(to / 1000),\n      fromIso: new Date(from).toISOString(),\n      toIso: new Date(to).toISOString(),\n    };\n  }\n\n  private coerceToMillis(candidate: any): number | undefined {\n    if (candidate === undefined || candidate === null) {\n      return undefined;\n    }\n\n    if (typeof candidate === 'number') {\n      if (!Number.isFinite(candidate)) {\n        return undefined;\n      }\n      return this.normalizeEpoch(candidate);\n    }\n\n    if (typeof candidate === 'string') {\n      const trimmed = candidate.trim();\n      if (trimmed === '') {\n        return undefined;\n      }\n\n      const numeric = Number(trimmed);\n      if (!Number.isNaN(numeric)) {\n        return this.normalizeEpoch(numeric);\n      }\n\n      const parsed = Date.parse(trimmed);\n      if (!Number.isNaN(parsed)) {\n        return parsed;\n      }\n\n      return undefined;\n    }\n\n    if (candidate instanceof Date) {\n      const time = candidate.getTime();\n      return Number.isFinite(time) ? time : undefined;\n    }\n\n    if (typeof (candidate as any).toMillis === 'function') {\n      const millis = (candidate as any).toMillis();\n      if (Number.isFinite(millis)) {\n        return millis;\n      }\n    }\n\n    if (typeof candidate.valueOf === 'function') {\n      const valueOfResult = candidate.valueOf();\n      if (typeof valueOfResult === 'number' && Number.isFinite(valueOfResult)) {\n        return this.normalizeEpoch(valueOfResult);\n      }\n    }\n\n    if (typeof (candidate as any).toISOString === 'function') {\n      const iso = (candidate as any).toISOString();\n      const parsed = Date.parse(iso);\n      if (!Number.isNaN(parsed)) {\n        return parsed;\n      }\n    }\n\n    return undefined;\n  }\n\n  private normalizeEpoch(value: number): number {\n    // Treat values smaller than 1e11 (~3,170 years in ms) as seconds\n    return value < 1e11 ? value * 1000 : value;\n  }\n\n  private formatPartiqlIdentifier(identifier?: string): string {\n    if (!identifier) {\n      return '\"timestamp\"';\n    }\n\n    const trimmed = identifier.trim();\n\n    if (trimmed === '') {\n      return '\"timestamp\"';\n    }\n\n    // If identifier already contains quotes, parentheses, brackets, or spaces, assume user supplied a full expression\n    if (/[\"'\\s()\\[\\]]/.test(trimmed)) {\n      return trimmed;\n    }\n\n    // Quote each dot-delimited segment to protect reserved words\n    return trimmed\n      .split('.')\n      .map((segment) => `\"${segment.replace(/\"/g, '\"\"')}\"`)\n      .join('.');\n  }\n\n  /**\n   * Map Grafana filter operators to PartiQL operators\n   */\n  private mapFilterOperator(operator: string): string {\n    const operatorMap: Record<string, string> = {\n      '=': '=',\n      '!=': '<>',\n      '>': '>',\n      '<': '<',\n      '>=': '>=',\n      '<=': '<=',\n      '=~': 'LIKE', // Regex-like matching\n      '!~': 'NOT LIKE',\n      'in': 'IN',\n      'not in': 'NOT IN',\n    };\n    \n    return operatorMap[operator] || '=';\n  }\n\n  /**\n   * Format filter values for PartiQL queries\n   */\n  private formatFilterValue(value: string, operator: string): string {\n    // Handle IN/NOT IN operators with arrays\n    if (operator === 'in' || operator === 'not in') {\n      // If value is already formatted as array, return as-is\n      if (value.startsWith('(') && value.endsWith(')')) {\n        return value;\n      }\n      // Split comma-separated values and format as array\n      const values = value.split(',').map(v => `'${v.trim().replace(/'/g, \"''\")}'`);\n      return `(${values.join(', ')})`;\n    }\n    \n    // Handle LIKE operators with wildcards\n    if (operator === '=~' || operator === '!~') {\n      // Add wildcards if not present\n      const likeValue = value.includes('%') ? value : `%${value}%`;\n      return `'${likeValue.replace(/'/g, \"''\")}'`;\n    }\n    \n    // Handle numeric values\n    if (/^\\d+(\\.\\d+)?$/.test(value)) {\n      return value;\n    }\n    \n    // Default: quoted string value\n    return `'${value.replace(/'/g, \"''\")}'`;\n  }\n\n  /**\n   * Get available template variables for UI hints\n   * Enhanced to include all Grafana built-in variables\n   */\n  getVariables(): string[] {\n    const customVariables = this.templateSrv.getVariables().map((v) => `$${v.name}`);\n    \n    // Add Grafana built-in variables\n    const builtInVariables = [\n      '$__timeFilter',      // Main time filter\n      '$__timeFilterIso',   // ISO format time filter\n      '$__timeFilterMs',    // Millisecond time filter\n      '$__from',            // Unix timestamp from\n      '$__to',              // Unix timestamp to\n      '$__fromIso',         // ISO format from\n      '$__toIso',           // ISO format to\n      '$__interval',        // Time interval (e.g., \"5m\")\n      '$__interval_ms',     // Time interval in milliseconds\n      '$__adhocFilters',    // Ad-hoc filter conditions\n      '$__dashboard',       // Dashboard info\n      '$__user',            // Current user info\n      '$__org'              // Organization info\n    ];\n    \n    return [...builtInVariables, ...customVariables];\n  }\n\n  /**\n   * Get variable suggestions with descriptions for UI\n   */\n  getVariablesSuggestions(): Array<{ label: string; detail: string; insertText: string }> {\n    const suggestions = [\n      {\n        label: '$__timeFilter',\n        detail: 'Automatic time range filter for timestamp field',\n        insertText: '$__timeFilter'\n      },\n      {\n        label: '$__timeFilterIso',\n        detail: 'Time range filter using ISO date strings',\n        insertText: '$__timeFilterIso'\n      },\n      {\n        label: '$__from',\n        detail: 'Start time as Unix timestamp',\n        insertText: '$__from'\n      },\n      {\n        label: '$__to',\n        detail: 'End time as Unix timestamp',\n        insertText: '$__to'\n      },\n      {\n        label: '$__fromIso',\n        detail: 'Start time as ISO string',\n        insertText: '$__fromIso'\n      },\n      {\n        label: '$__toIso',\n        detail: 'End time as ISO string',\n        insertText: '$__toIso'\n      },\n      {\n        label: '$__interval',\n        detail: 'Auto-calculated time interval (e.g., \"5m\")',\n        insertText: '$__interval'\n      },\n      {\n        label: '$__adhocFilters',\n        detail: 'Additional filter conditions from dashboard',\n        insertText: '$__adhocFilters'\n      }\n    ];\n\n    // Add custom dashboard variables\n    const customVariables = this.templateSrv.getVariables().map((v) => ({\n      label: `$${v.name}`,\n      detail: `Custom variable: ${v.type} (${(v as any).multi ? 'multi-value' : 'single-value'})`,\n      insertText: `$${v.name}`\n    }));\n\n    return [...suggestions, ...customVariables];\n  }\n\n  /**\n   * Validate template variables in a query string\n   */\n  validateTemplateVariables(queryString: string): Array<{ variable: string; error: string }> {\n    const errors: Array<{ variable: string; error: string }> = [];\n    const variablePattern = /\\$(\\w+)|\\$\\{([^}]+)\\}/g;\n    const availableVars = new Set(this.getVariables().map(v => v.substring(1))); // Remove $ prefix\n    \n    let match;\n    while ((match = variablePattern.exec(queryString)) !== null) {\n      const variableName = match[1] || match[2];\n      \n      if (!availableVars.has(variableName)) {\n        errors.push({\n          variable: `$${variableName}`,\n          error: `Variable not found. Available variables: ${Array.from(availableVars).join(', ')}`\n        });\n      }\n    }\n    \n    return errors;\n  }\n\n  // DataSourceWithBackend automatically handles query() and testDatasource() methods\n}\n","import React, { ChangeEvent } from 'react';\nimport { Input, SecretInput, Select, Alert, Button, useTheme2 } from '@grafana/ui';\nimport { DataSourcePluginOptionsEditorProps, SelectableValue, GrafanaTheme2 } from '@grafana/data';\nimport { css } from '@emotion/css';\nimport { FluvioDataSourceOptions, FluvioSecureJsonData } from '../types';\n\nconst AWS_REGIONS = [\n  { label: 'US East (N. Virginia) - us-east-1', value: 'us-east-1' },\n  { label: 'US East (Ohio) - us-east-2', value: 'us-east-2' },\n  { label: 'US West (N. California) - us-west-1', value: 'us-west-1' },\n  { label: 'US West (Oregon) - us-west-2', value: 'us-west-2' },\n  { label: 'Asia Pacific (Sydney) - ap-southeast-2', value: 'ap-southeast-2' },\n  { label: 'Asia Pacific (Singapore) - ap-southeast-1', value: 'ap-southeast-1' },\n  { label: 'Asia Pacific (Tokyo) - ap-northeast-1', value: 'ap-northeast-1' },\n  { label: 'Asia Pacific (Seoul) - ap-northeast-2', value: 'ap-northeast-2' },\n  { label: 'Asia Pacific (Mumbai) - ap-south-1', value: 'ap-south-1' },\n  { label: 'Europe (Ireland) - eu-west-1', value: 'eu-west-1' },\n  { label: 'Europe (London) - eu-west-2', value: 'eu-west-2' },\n  { label: 'Europe (Frankfurt) - eu-central-1', value: 'eu-central-1' },\n  { label: 'Europe (Stockholm) - eu-north-1', value: 'eu-north-1' },\n  { label: 'Canada (Central) - ca-central-1', value: 'ca-central-1' },\n  { label: 'South America (São Paulo) - sa-east-1', value: 'sa-east-1' },\n];\n\n// Responsive styling functions for ConfigEditor\nconst getConfigStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    max-width: 100%;\n    overflow: hidden;\n  `,\n  \n  configSection: css`\n    background: ${theme.colors.background.secondary};\n    border: 1px solid ${theme.colors.border.weak};\n    border-radius: ${theme.shape.borderRadius()};\n    padding: ${theme.spacing(2)};\n    margin: ${theme.spacing(1)} 0;\n  `,\n  \n  formRow: css`\n    display: flex;\n    flex-wrap: wrap;\n    gap: ${theme.spacing(2)};\n    align-items: flex-start;\n    width: 100%;\n    margin-bottom: ${theme.spacing(2)};\n    \n    @media (max-width: 768px) {\n      flex-direction: column;\n      align-items: stretch;\n      gap: ${theme.spacing(1)};\n    }\n  `,\n  \n  fieldContainer: css`\n    display: flex;\n    flex-direction: column;\n    flex: 1;\n    min-width: 250px;\n    \n    @media (max-width: 768px) {\n      min-width: 100%;\n      margin-bottom: ${theme.spacing(1)};\n    }\n  `,\n  \n  fieldLabel: css`\n    font-size: ${theme.typography.bodySmall.fontSize};\n    font-weight: ${theme.typography.fontWeightMedium};\n    color: ${theme.colors.text.primary};\n    margin-bottom: ${theme.spacing(0.5)};\n  `,\n  \n  alertSection: css`\n    margin-bottom: ${theme.spacing(2)};\n  `,\n  \n  sectionHeader: css`\n    display: flex;\n    align-items: center;\n    gap: ${theme.spacing(1)};\n    margin-bottom: ${theme.spacing(2)};\n    font-size: ${theme.typography.h5.fontSize};\n    font-weight: ${theme.typography.h5.fontWeight};\n    color: ${theme.colors.text.primary};\n  `,\n  \n  credentialsInfo: css`\n    font-size: ${theme.typography.bodySmall.fontSize};\n    color: ${theme.colors.text.secondary};\n    margin-bottom: ${theme.spacing(2)};\n  `,\n  \n  permissionsInfo: css`\n    background: ${theme.colors.info.transparent};\n    border: 1px solid ${theme.colors.info.border};\n    border-radius: ${theme.shape.borderRadius()};\n    padding: ${theme.spacing(2)};\n    font-size: ${theme.typography.bodySmall.fontSize};\n    color: ${theme.colors.text.primary};\n    \n    code {\n      background: ${theme.colors.background.canvas};\n      padding: 2px 4px;\n      border-radius: 2px;\n      font-family: ${theme.typography.fontFamilyMonospace};\n    }\n  `\n});\n\ntype Props = DataSourcePluginOptionsEditorProps<FluvioDataSourceOptions, FluvioSecureJsonData>;\n\nexport function ConfigEditor({ options, onOptionsChange }: Props) {\n  const theme = useTheme2();\n  const styles = getConfigStyles(theme);\n  const { jsonData, secureJsonFields, secureJsonData } = options;\n\n  const onChange = (field: keyof FluvioDataSourceOptions) => (e: ChangeEvent<HTMLInputElement>) => {\n    onOptionsChange({\n      ...options,\n      jsonData: {\n        ...jsonData,\n        [field]: e.target.value,\n      },\n    });\n  };\n\n  const onRegionChange = (value: SelectableValue<string>) => {\n    onOptionsChange({\n      ...options,\n      jsonData: {\n        ...jsonData,\n        region: value.value || '',\n      },\n    });\n  };\n\n  const fillExampleValues = () => {\n    onOptionsChange({\n      ...options,\n      jsonData: {\n        ...jsonData,\n        region: 'ap-southeast-2',\n      },\n    });\n  };\n\n  const onSecretChange = (field: keyof FluvioSecureJsonData) => (e: ChangeEvent<HTMLInputElement>) => {\n    onOptionsChange({\n      ...options,\n      secureJsonData: {\n        ...secureJsonData,\n        [field]: e.target.value,\n      },\n    });\n  };\n\n  const onResetSecret = (field: keyof FluvioSecureJsonData) => () => {\n    onOptionsChange({\n      ...options,\n      secureJsonFields: {\n        ...secureJsonFields,\n        [field]: false,\n      },\n      secureJsonData: {\n        ...secureJsonData,\n        [field]: '',\n      },\n    });\n  };\n\n  const isConfigured = jsonData?.region && secureJsonFields?.accessKey && secureJsonFields?.secretKey;\n\n  return (\n    <div className={styles.container}>\n      {!isConfigured && (\n        <div className={styles.alertSection}>\n          <Alert severity=\"info\" title=\"Configuration Required\">\n            Configure your AWS region and permanent IAM credentials to connect to DynamoDB. Use long-term access keys for reliable access.\n            <div style={{ marginTop: '8px' }}>\n              <Button variant=\"secondary\" size=\"sm\" onClick={fillExampleValues}>\n                Use Example Region (ap-southeast-2)\n              </Button>\n            </div>\n          </Alert>\n        </div>\n      )}\n      \n      <div className={styles.configSection}>\n        <div className={styles.sectionHeader}>\n          🌍 AWS Configuration\n        </div>\n        \n        <div className={styles.formRow}>\n          <div className={styles.fieldContainer}>\n            <label className={styles.fieldLabel} title=\"Select the AWS region where your DynamoDB tables are located\">\n              AWS Region\n            </label>\n            <Select\n              placeholder=\"Select AWS region\"\n              value={AWS_REGIONS.find(r => r.value === jsonData?.region)}\n              options={AWS_REGIONS}\n              onChange={onRegionChange}\n            />\n          </div>\n        </div>\n        \n        <div className={styles.formRow}>\n          <div className={styles.fieldContainer}>\n            <label className={styles.fieldLabel} title=\"Optional: Custom DynamoDB endpoint URL for local development or VPC endpoints\">\n              Custom Endpoint\n            </label>\n            <Input\n              placeholder=\"https://dynamodb.ap-southeast-2.amazonaws.com (leave empty for default)\"\n              value={jsonData?.endpoint || ''}\n              onChange={onChange('endpoint')}\n            />\n          </div>\n        </div>\n      </div>\n\n      <div className={styles.configSection}>\n        <div className={styles.sectionHeader}>\n          🔐 AWS Credentials\n        </div>\n        \n        <div className={styles.credentialsInfo}>\n          Use permanent IAM user credentials (Access Key ID starting with AKIA*). \n          This plugin is optimized for long-term credentials that don&apos;t expire. \n          All credentials are stored securely and never visible in plain text.\n        </div>\n        \n        <div className={styles.formRow}>\n          <div className={styles.fieldContainer}>\n            <label className={styles.fieldLabel}>Access Key ID</label>\n            <SecretInput\n              isConfigured={secureJsonFields?.accessKey}\n              value={secureJsonData?.accessKey || ''}\n              placeholder=\"AKIA**************** (permanent access key)\"\n              onChange={onSecretChange('accessKey')}\n              onReset={onResetSecret('accessKey')}\n            />\n          </div>\n        </div>\n        \n        <div className={styles.formRow}>\n          <div className={styles.fieldContainer}>\n            <label className={styles.fieldLabel}>Secret Access Key</label>\n            <SecretInput\n              isConfigured={secureJsonFields?.secretKey}\n              value={secureJsonData?.secretKey || ''}\n              placeholder=\"Your AWS secret access key\"\n              onChange={onSecretChange('secretKey')}\n              onReset={onResetSecret('secretKey')}\n            />\n          </div>\n        </div>\n        \n        {/* Session token field removed - optimized for permanent credentials only */}\n\n      </div>\n\n      <div className={styles.permissionsInfo}>\n        💡 <strong>IAM Permissions Required:</strong><br/>\n        Your AWS user/role needs these DynamoDB permissions:<br/>\n        • <code>dynamodb:Query</code> - for key-based queries<br/>\n        • <code>dynamodb:Scan</code> - for table scans<br/>\n        • <code>dynamodb:ExecuteStatement</code> - for PartiQL queries<br/>\n        • <code>dynamodb:DescribeTable</code> - for table metadata<br/>\n        • <code>dynamodb:ListTables</code> - for connection testing\n      </div>\n    </div>\n  );\n}\n","import React, { ChangeEvent, useState } from 'react';\nimport { Input, RadioButtonGroup, Button, Select, Alert, useTheme2, InlineField, InlineSwitch, DateTimePicker } from '@grafana/ui'; \nimport { QueryEditorProps, SelectableValue, GrafanaTheme2, DataQueryRequest, DataFrame, CoreApp, TimeRange, dateTime, Field, DateTime } from '@grafana/data';\nimport { css } from '@emotion/css';\nimport { DataSource } from '../datasource';\nimport { FluvioDataSourceOptions, DynamoQuery, FieldMapping } from '../types';\nimport { firstValueFrom } from 'rxjs';\n\ntype Props = QueryEditorProps<DataSource, DynamoQuery, FluvioDataSourceOptions>;\n\n// Responsive styling functions\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    max-width: 100% !important;\n    overflow: hidden !important;\n    width: 100% !important;\n    box-sizing: border-box !important;\n  `,\n  \n  responsiveGrid: css`\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n    gap: ${theme.spacing(2)};\n    width: 100%;\n    \n    @media (max-width: 768px) {\n      grid-template-columns: 1fr;\n    }\n  `,\n  \n  formRow: css`\n    display: flex !important;\n    flex-wrap: wrap !important;\n    gap: ${theme.spacing(2)} !important;\n    align-items: flex-start !important;\n    width: 100% !important;\n    margin-bottom: ${theme.spacing(2)} !important;\n    box-sizing: border-box !important;\n    \n    /* Force wrapping on smaller screens */\n    @media (max-width: 1200px) {\n      flex-direction: column !important;\n      align-items: stretch !important;\n      gap: ${theme.spacing(1)} !important;\n    }\n    \n    /* Additional breakpoint for tablet */\n    @media (max-width: 768px) {\n      flex-direction: column !important;\n      align-items: stretch !important;\n      gap: ${theme.spacing(1)} !important;\n    }\n  `,\n  \n  fieldContainer: css`\n    display: flex !important;\n    flex-direction: column !important;\n    flex: 1 !important;\n    min-width: 200px !important;\n    box-sizing: border-box !important;\n    \n    @media (max-width: 1200px) {\n      min-width: 100% !important;\n      margin-bottom: ${theme.spacing(1)} !important;\n      flex: none !important;\n    }\n    \n    @media (max-width: 768px) {\n      min-width: 100% !important;\n      margin-bottom: ${theme.spacing(1)} !important;\n      flex: none !important;\n    }\n  `,\n  \n  smallFieldContainer: css`\n    display: flex;\n    flex-direction: column;\n    min-width: 150px;\n    \n    @media (max-width: 1024px) {\n      min-width: 100%;\n      margin-bottom: ${theme.spacing(1)};\n    }\n  `,\n  \n  fieldLabel: css`\n    font-size: ${theme.typography.bodySmall.fontSize};\n    font-weight: ${theme.typography.fontWeightMedium};\n    color: ${theme.colors.text.primary};\n    margin-bottom: ${theme.spacing(0.5)};\n  `,\n  \n  keyValueRow: css`\n    display: flex;\n    flex-wrap: wrap;\n    gap: ${theme.spacing(1)};\n    align-items: flex-end;\n    width: 100%;\n    margin-bottom: ${theme.spacing(2)};\n    \n    @media (max-width: 768px) {\n      flex-direction: column;\n      align-items: stretch;\n    }\n  `,\n  \n  equalSign: css`\n    align-self: flex-end;\n    padding: 0 ${theme.spacing(1)};\n    margin-bottom: 8px;\n    font-weight: bold;\n    color: ${theme.colors.text.secondary};\n    \n    @media (max-width: 768px) {\n      align-self: center;\n      margin: ${theme.spacing(0.5)} 0;\n    }\n  `,\n  \n  \n  querySection: css`\n    background: ${theme.colors.background.secondary} !important;\n    border: 1px solid ${theme.colors.border.weak} !important;\n    border-radius: ${theme.shape.borderRadius()} !important;\n    padding: ${theme.spacing(2)} !important;\n    margin: ${theme.spacing(1)} 0 !important;\n    width: 100% !important;\n    box-sizing: border-box !important;\n    overflow: hidden !important;\n  `,\n  \n  /* Alternative layout for mobile - force vertical stacking */\n  mobileStack: css`\n    @media (max-width: 1200px) {\n      display: block !important;\n      width: 100% !important;\n      \n      & > * {\n        display: block !important;\n        width: 100% !important;\n        margin-bottom: ${theme.spacing(2)} !important;\n        box-sizing: border-box !important;\n        float: none !important;\n        clear: both !important;\n      }\n      \n      /* Force all nested elements to be full width */\n      & input,\n      & button,\n      & [role=\"combobox\"],\n      & [class*=\"input\"],\n      & [class*=\"select\"] {\n        width: 100% !important;\n        max-width: none !important;\n        min-width: auto !important;\n        box-sizing: border-box !important;\n      }\n    }\n    \n    /* Even more aggressive - force on smaller screens */\n    @media (max-width: 768px) {\n      display: block !important;\n      width: 100% !important;\n      \n      & > * {\n        display: block !important;\n        width: 100% !important;\n        margin-bottom: ${theme.spacing(1)} !important;\n        box-sizing: border-box !important;\n        float: none !important;\n        clear: both !important;\n      }\n    }\n  `,\n  \n  testQueryButton: css`\n    background: ${theme.colors.primary.main};\n    color: ${theme.colors.primary.contrastText};\n    border: none;\n    font-weight: 500;\n    \n    &:hover {\n      background: ${theme.colors.primary.shade};\n    }\n    \n    &:disabled {\n      background: ${theme.colors.action.disabledBackground};\n      color: ${theme.colors.action.disabledText};\n    }\n  `,\n  \n  buttonGroup: css`\n    display: flex;\n    gap: ${theme.spacing(1)};\n    align-items: center;\n    margin-top: ${theme.spacing(2)};\n    \n    @media (max-width: 768px) {\n      flex-direction: column;\n      align-items: stretch;\n      \n      & > button {\n        width: 100%;\n      }\n    }\n  `,\n  \n  successMessage: css`\n    background: ${theme.colors.success.transparent};\n    border: 1px solid ${theme.colors.success.border};\n    border-radius: ${theme.shape.borderRadius()};\n    padding: ${theme.spacing(1)};\n    color: ${theme.colors.success.text};\n    font-size: ${theme.typography.bodySmall.fontSize};\n    margin-top: ${theme.spacing(1)};\n  `,\n  \n  advancedSection: css`\n    background: ${theme.colors.background.secondary};\n    border: 1px solid ${theme.colors.border.weak};\n    border-radius: ${theme.shape.borderRadius()};\n    padding: ${theme.spacing(2)};\n    margin-top: ${theme.spacing(2)};\n  `,\n  \n  fieldMappingCard: css`\n    background: ${theme.colors.background.primary};\n    border: 1px solid ${theme.colors.border.medium};\n    border-radius: ${theme.shape.borderRadius()};\n    padding: ${theme.spacing(2)};\n    margin: ${theme.spacing(1)} 0;\n  `,\n  \n  infoText: css`\n    font-size: ${theme.typography.bodySmall.fontSize};\n    color: ${theme.colors.text.secondary};\n    margin-top: ${theme.spacing(1)};\n  `\n});\n\n// Helper function to analyze data structure on the frontend\nconst tryFallbackSchemaAnalysis = async (originalQuery: DynamoQuery, datasource: DataSource): Promise<FieldMapping[]> => {\n  console.log('Starting fallback schema analysis...');\n  \n  // Run a normal query to get raw data\n  const dataQuery: DynamoQuery = {\n    ...originalQuery,\n    discoverSchema: false,\n    outputFormat: 'auto',\n    limit: originalQuery.limit || 100 // Use user's specified limit or default to 100\n  };\n  \n  const timeRange: TimeRange = {\n    from: dateTime().subtract(1, 'hour'),\n    to: dateTime(),\n    raw: { from: 'now-1h', to: 'now' }\n  };\n  \n  const queryRequest: DataQueryRequest<DynamoQuery> = {\n    targets: [dataQuery],\n    range: timeRange,\n    interval: '1s',\n    intervalMs: 1000,\n    maxDataPoints: 500,\n    scopedVars: {},\n    timezone: 'UTC',\n    app: CoreApp.Explore,\n    requestId: 'fallback_analysis',\n    startTime: Date.now()\n  };\n  \n  const response = await firstValueFrom(datasource.query(queryRequest));\n  console.log('Fallback query response:', response);\n  \n  const discoveredFields: FieldMapping[] = [];\n  \n  if (response.data && response.data.length > 0) {\n    const dataFrame = response.data[0] as DataFrame;\n    \n    // Look for raw_json field\n    const rawJsonField = dataFrame.fields.find((f: Field) => f.name === 'raw_json');\n    \n    if (rawJsonField && rawJsonField.values && rawJsonField.values.length > 0) {\n      console.log('Found raw_json field, analyzing structure...');\n      \n      // Parse the first few raw JSON records\n      const sampleSize = Math.min(3, rawJsonField.values.length);\n      const allFieldPaths = new Set<string>();\n      \n      for (let i = 0; i < sampleSize; i++) {\n        const rawJson = rawJsonField.values[i] as string;\n        try {\n          const parsedData = JSON.parse(rawJson);\n          const paths = extractFieldPaths(parsedData, '');\n          paths.forEach(path => allFieldPaths.add(path.path));\n        } catch (error) {\n          console.error('Failed to parse raw JSON:', error);\n        }\n      }\n      \n      // Create field mappings from discovered paths (limit to avoid UI overload)\n      const sortedPaths = Array.from(allFieldPaths).sort();\n      const maxFields = 40; // Limit to 40 fields to avoid UI overload\n      \n      sortedPaths.slice(0, maxFields).forEach(path => {\n        // Create a clean field name\n        const cleanFieldName = path.replace(/\\[.*?\\]/g, '').replace(/\\./g, '_');\n        \n        // Determine data type by sampling the field\n        let dataType: 'string' | 'number' | 'boolean' | 'time' | 'json' = 'string';\n        try {\n          const firstRecord = JSON.parse(rawJsonField.values[0] as string);\n          const sampleValue = getValueByPath(firstRecord, path);\n          dataType = determineDataType(sampleValue);\n        } catch {\n          dataType = 'string'; // Default fallback\n        }\n        \n        discoveredFields.push({\n          fieldName: cleanFieldName || path.split('.').pop() || 'field',\n          sourcePath: path,\n          dataType: dataType\n        });\n      });\n      \n      if (sortedPaths.length > maxFields) {\n        console.log(`Limited field discovery to ${maxFields} out of ${sortedPaths.length} total fields`);\n      }\n      \n      console.log(`Fallback analysis discovered ${discoveredFields.length} fields:`, discoveredFields);\n    }\n  }\n  \n  return discoveredFields;\n};\n\n// Helper function to extract all field paths from an object\nconst extractFieldPaths = (obj: any, prefix: string): Array<{path: string, type: string}> => {\n  const paths: Array<{path: string, type: string}> = [];\n  \n  const traverse = (current: any, currentPath: string) => {\n    if (current === null || current === undefined) {\n      return;\n    }\n    \n    if (typeof current === 'object' && !Array.isArray(current)) {\n      // Object - traverse properties\n      Object.keys(current).forEach(key => {\n        const newPath = currentPath ? `${currentPath}.${key}` : key;\n        \n        // Add this path\n        paths.push({\n          path: newPath,\n          type: determineDataType(current[key])\n        });\n        \n        // Recursively traverse if it's a nested object\n        if (typeof current[key] === 'object' && current[key] !== null && !Array.isArray(current[key])) {\n          traverse(current[key], newPath);\n        }\n      });\n    } else if (Array.isArray(current) && current.length > 0) {\n      // Array - analyze first element\n      const arrayPath = `${currentPath}[0]`;\n      traverse(current[0], arrayPath);\n    }\n  };\n  \n  traverse(obj, prefix);\n  return paths;\n};\n\n// Helper to get value by path\nconst getValueByPath = (obj: any, path: string): any => {\n  const keys = path.split('.');\n  let current = obj;\n  \n  for (const key of keys) {\n    if (key.includes('[')) {\n      const [arrayKey, indexStr] = key.split('[');\n      const index = parseInt(indexStr.replace(']', ''), 10);\n      current = current?.[arrayKey]?.[index];\n    } else {\n      current = current?.[key];\n    }\n    \n    if (current === undefined || current === null) {\n      return undefined;\n    }\n  }\n  \n  return current;\n};\n\n// Helper to determine data type\nconst determineDataType = (value: any): 'string' | 'number' | 'boolean' | 'time' | 'json' => {\n  if (value === null || value === undefined) {\n    return 'string';\n  }\n\n  if (typeof value === 'boolean') {\n    return 'boolean';\n  }\n  if (typeof value === 'number') {\n    return 'number';\n  }\n  \n  if (typeof value === 'string') {\n    // Check if it looks like a timestamp\n    if (/^\\d{10}$/.test(value) || /^\\d{13}$/.test(value)) {\n      return 'time';\n    }\n    // Check for ISO date strings\n    if (/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/.test(value)) {\n      return 'time';\n    }\n    return 'string';\n  }\n  \n  if (typeof value === 'object' && value !== null) {\n    return 'json';\n  }\n  \n  return 'string';\n};\n\nexport function QueryEditor({ query, onChange, onRunQuery, datasource }: Props) {\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n  const [showAdvanced, setShowAdvanced] = useState(false);\n  const [isDiscovering, setIsDiscovering] = useState(false);\n  const [isTestingQuery, setIsTestingQuery] = useState(false);\n  const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n  const [showTemplateVariableHelp, setShowTemplateVariableHelp] = useState(false);\n\n  // Get available template variables for UI hints\n  const availableVariables = React.useMemo(() => {\n    try {\n      return datasource.getVariables ? datasource.getVariables() : [];\n    } catch {\n      return [];\n    }\n  }, [datasource]);\n\n  // Get detailed variable suggestions with descriptions\n  const variableSuggestions = React.useMemo(() => {\n    try {\n      return datasource.getVariablesSuggestions ? datasource.getVariablesSuggestions() : [];\n    } catch {\n      return [];\n    }\n  }, [datasource]);\n\n  const queryMode = query.queryMode ?? (query.partiql !== undefined ? 'partiql' : 'key');\n\n  React.useEffect(() => {\n    if (!query.queryMode) {\n      onChange({ ...query, queryMode });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [query.queryMode, queryMode]);\n\n  // Enhanced template variable validation with comprehensive checks\n  const validateTemplateVariables = (queryText: string): { isValid: boolean; warnings: string[]; errors: string[] } => {\n    const warnings: string[] = [];\n    const errors: string[] = [];\n\n    if (!queryText) {\n      return { isValid: true, warnings: [], errors: [] };\n    }\n\n    // Use datasource validation if available\n    try {\n      const validationErrors = datasource.validateTemplateVariables ? datasource.validateTemplateVariables(queryText) : [];\n      validationErrors.forEach(error => {\n        errors.push(`❌ ${error.variable}: ${error.error}`);\n      });\n    } catch (err) {\n      console.warn('Template variable validation failed:', err);\n    }\n\n    // Validate PartiQL syntax using datasource method\n    if (queryMode === 'partiql') {\n      const partiqlValidation = (datasource as any).validatePartiQLQuery ? (datasource as any).validatePartiQLQuery(queryText) : { isValid: true };\n      if (!partiqlValidation.isValid) {\n        errors.push(`❌ PartiQL Syntax Error: ${partiqlValidation.error}`);\n      }\n    }\n\n    // Check if $__timeFilter is used without enabling time filtering\n    if (queryText.includes('$__timeFilter') && !query.timeFilterEnabled) {\n      warnings.push('⚠️ $__timeFilter requires \"Enable Time Filtering\" to be turned ON. Please enable it below.');\n    }\n\n    // Check for common variable usage patterns\n    if (queryText.includes('$__timeFilter') && !query.timestampField) {\n      warnings.push('⚠️ $__timeFilter requires a timestamp field to be specified.');\n    }\n\n    // Find all variable references in the query\n    const variableMatches = queryText.match(/\\$[\\w_]+|\\$\\{[\\w_]+\\}/g) || [];\n    const referencedVariables = variableMatches.map(match =>\n      match.startsWith('${') ? match.slice(2, -1) : match.slice(1)\n    );\n\n    // Check for undefined variables (excluding built-in Grafana variables)\n    const builtInVariables = ['__from', '__to', '__timeFilter', '__timeFilterIso', '__timeFilterMs', '__interval', '__interval_ms', '__rate_interval', '__range', '__fromIso', '__toIso', '__adhocFilters'];\n    const availableVarNames = availableVariables.map(v => v.replace('$', ''));\n\n    for (const varName of referencedVariables) {\n      if (!builtInVariables.includes(varName) && !availableVarNames.includes(varName)) {\n        warnings.push(`⚠️ Variable '$${varName}' is not defined in dashboard variables`);\n      }\n    }\n\n    return { isValid: errors.length === 0, warnings, errors };\n  };\n\n  const onFieldChange = <T extends keyof DynamoQuery>(field: T) => (e: ChangeEvent<HTMLInputElement>) => {\n    onChange({ ...query, [field]: e.target.value });\n  };\n\n  const onLimitChange = (e: ChangeEvent<HTMLInputElement>) => {\n    onChange({ ...query, limit: parseInt(e.target.value, 10) || 100 });\n  };\n\n  const onOutputFormatChange = (value: SelectableValue<string>) => {\n    const outputFormat = value.value as 'auto' | 'table' | 'geomap' | 'timeseries' | undefined;\n    onChange({ ...query, outputFormat: outputFormat || 'auto' });\n  };\n\n  const discoverSchema = async () => {\n    if (!query.table) {\n      alert('Please enter a table name first');\n      return;\n    }\n    \n    setIsDiscovering(true);\n    try {\n      console.log('Discovering schema for table:', query.table, 'with limit:', query.limit || 100);\n      \n      // Use backend's schema discovery to analyze table structure\n      const discoveryQuery: DynamoQuery = { \n        ...query, \n        discoverSchema: true, // Backend returns schema information\n        fieldMappings: undefined, // Clear existing mappings\n        outputFormat: 'auto' as const, // Auto-detect best format\n        limit: query.limit || 100 // Use user's specified limit or default to 100\n      };\n      \n      console.log('Executing schema discovery for any table type...');\n      onChange(discoveryQuery);\n      onRunQuery();\n      \n      // The backend will analyze the actual data structure dynamically\n      alert('🔍 Discovering schema... The system is analyzing your table structure to understand the data format.');\n      \n    } catch (error) {\n      console.error('Schema discovery failed:', error);\n      alert('Schema discovery failed. Please check your table name and connection settings.');\n    } finally {\n      setTimeout(() => setIsDiscovering(false), 500);\n    }\n  };\n  \n  const generateFieldMappingsFromData = async () => {\n    const hasPartiql = Boolean(query.partiql && query.partiql.trim().length > 0);\n    const hasTable = Boolean(query.table && query.table.trim().length > 0);\n\n    if (!hasPartiql && !hasTable) {\n      alert('Please provide either a PartiQL statement or a table name before discovering the schema.');\n      return;\n    }\n\n    setIsDiscovering(true);\n    try {\n      console.log(\n        'Starting dynamic schema discovery using',\n        hasPartiql ? 'PartiQL statement' : `table: ${query.table}`,\n        'with limit:',\n        query.limit || 100\n      );\n\n      // Step 1: Execute schema discovery query directly to get response\n      const schemaQuery: DynamoQuery = { \n        ...query, \n        discoverSchema: true, // Backend will return schema information\n        limit: query.limit || 100, // Use user's specified limit or default to 100\n        fieldMappings: undefined, // Clear existing mappings\n        refId: 'schema_discovery'\n      };\n      \n      console.log('Executing schema discovery query:', schemaQuery);\n      \n      // Store original query \n      const originalQuery = { ...query };\n      \n      // Execute the schema discovery query directly to get the response\n      const timeRange: TimeRange = {\n        from: dateTime().subtract(1, 'hour'),\n        to: dateTime(),\n        raw: { from: 'now-1h', to: 'now' }\n      };\n      \n      const queryRequest: DataQueryRequest<DynamoQuery> = {\n        targets: [schemaQuery],\n        range: timeRange,\n        interval: '1s',\n        intervalMs: 1000,\n        maxDataPoints: 500,\n        scopedVars: {},\n        timezone: 'UTC',\n        app: CoreApp.Explore,\n        requestId: 'schema_discovery',\n        startTime: Date.now()\n      };\n      \n      const queryObservable = datasource.query(queryRequest);\n      const response = await firstValueFrom(queryObservable);\n      \n      console.log('Schema discovery response:', response);\n      console.log('Response data length:', response.data?.length || 0);\n      if (response.data?.length > 0) {\n        console.log('First frame:', response.data[0]);\n        console.log('First frame fields:', response.data[0].fields);\n      }\n      \n      if (response.data && response.data.length > 0) {\n        const schemaFrame = response.data[0] as DataFrame;\n        console.log('Schema frame name:', schemaFrame.name);\n        console.log('Schema frame fields count:', schemaFrame.fields?.length || 0);\n        \n        const discoveredMappings: FieldMapping[] = [];\n        \n        // Parse schema frame to extract field information\n        // The backend returns: field_path, data_type, sample_value, frequency\n        if (schemaFrame.fields && schemaFrame.fields.length > 0) {\n          const fieldPathField = schemaFrame.fields.find((f: Field) => f.name === 'field_path');\n          const dataTypeField = schemaFrame.fields.find((f: Field) => f.name === 'data_type');\n          const sampleValueField = schemaFrame.fields.find((f: Field) => f.name === 'sample_value');\n          \n          console.log('Found fields:', {\n            fieldPath: !!fieldPathField,\n            dataType: !!dataTypeField,\n            sampleValue: !!sampleValueField\n          });\n          \n          if (fieldPathField && dataTypeField && fieldPathField.values) {\n            console.log('Processing discovered fields...');\n            \n            // Extract discovered fields from the response\n            for (let i = 0; i < fieldPathField.values.length; i++) {\n              const fieldPath = fieldPathField.values[i] as string;\n              const dataType = dataTypeField.values[i] as string;\n              const sampleValue = sampleValueField?.values[i] as string;\n              \n              if (fieldPath && dataType) {\n                // Create a clean field name from the path\n                const cleanFieldName = fieldPath.replace(/\\[.*?\\]/g, '').replace(/\\./g, '_');\n                \n                discoveredMappings.push({\n                  fieldName: cleanFieldName || fieldPath,\n                  sourcePath: fieldPath,\n                  dataType: dataType as 'string' | 'number' | 'boolean' | 'time' | 'json'\n                });\n                \n                console.log(`Discovered field: ${fieldPath} -> ${dataType} (sample: ${sampleValue})`);\n              }\n            }\n          }\n        }\n        \n        if (discoveredMappings.length > 0) {\n          // Update query with discovered field mappings\n          const updatedQuery = { \n            ...originalQuery, \n            fieldMappings: discoveredMappings,\n            outputFormat: 'table' as const, // Switch to table view to see the mapped fields\n            discoverSchema: false // Turn off schema discovery\n          };\n          \n          onChange(updatedQuery);\n          setShowAdvanced(true); // Show the advanced section so user can see the mappings\n          alert(`✅ Successfully discovered ${discoveredMappings.length} fields from ${query.limit || 100} records! Check the Advanced Field Mapping section below to customize as needed.`);\n          \n          console.log('Schema discovery completed successfully:', discoveredMappings);\n        } else {\n          console.log('No fields discovered from schema frame - trying fallback analysis');\n          // Fallback: Try to analyze the data on the frontend side\n          try {\n            const fallbackMappings = await tryFallbackSchemaAnalysis(originalQuery, datasource);\n            if (fallbackMappings.length > 0) {\n              const updatedQuery = { \n                ...originalQuery, \n                fieldMappings: fallbackMappings,\n                outputFormat: 'table' as const,\n                discoverSchema: false\n              };\n              \n              onChange(updatedQuery);\n              setShowAdvanced(true);\n              alert(`✅ Used fallback analysis and discovered ${fallbackMappings.length} fields! The backend schema discovery had issues, but we successfully analyzed your raw data directly. Check the Advanced Field Mapping section below.`);\n              return; // Success with fallback\n            }\n          } catch (fallbackError) {\n            console.error('Fallback analysis also failed:', fallbackError);\n          }\n          \n          alert('⚠️ No fields could be discovered from the schema response. The data structure might be too complex or there was an issue with field analysis. Try running a normal query first to verify your table access.');\n        }\n      } else {\n        console.log('Schema discovery response had no data frames');\n        if (response.errors && response.errors.length > 0) {\n          console.error('Response errors:', response.errors);\n          alert(`❌ Schema discovery failed with error: ${response.errors[0].message || 'Unknown error'}`);\n        } else {\n          alert('⚠️ Schema discovery returned no data frames. This could indicate:\\n• Table name is incorrect\\n• Table has no data\\n• Connection/permission issues\\n• Backend processing error\\n\\nTry running a normal query first to verify your table works.');\n        }\n      }\n      \n    } catch (error) {\n      console.error('Schema discovery failed:', error);\n      alert('❌ Schema discovery failed. Please check your table name, connection settings, and ensure the table contains data.');\n    } finally {\n      setIsDiscovering(false);\n    }\n  };\n\n  const testQuery = async () => {\n    // Validate query before testing\n    if (queryMode === 'partiql') {\n      if (!query.partiql || !query.partiql.trim()) {\n        alert('Please enter a PartiQL query first');\n        return;\n      }\n    } else {\n      if (!query.table) {\n        alert('Please enter a table name first');\n        return;\n      }\n    }\n    \n    setIsTestingQuery(true);\n    try {\n      // Run the query with user's limit (or reasonable default for testing)\n      const testQueryData = { \n        ...query, \n        limit: Math.min(query.limit || 1, 1000000), // Allow up to 100 records for testing, default 25\n        discoverSchema: false \n      };\n      onChange(testQueryData);\n      setTimeout(onRunQuery, 100);\n    } catch (error) {\n      console.error('Test query failed:', error);\n    } finally {\n      // Reset test state after a short delay\n      setTimeout(() => setIsTestingQuery(false), 2000);\n    }\n  };\n\n  const addFieldMapping = () => {\n    const newMapping: FieldMapping = {\n      fieldName: '',\n      sourcePath: '',\n      dataType: 'string'\n    };\n    const updatedMappings = [...(query.fieldMappings || []), newMapping];\n    onChange({ ...query, fieldMappings: updatedMappings });\n  };\n\n  const removeFieldMapping = (index: number) => {\n    const updatedMappings = (query.fieldMappings || []).filter((_, i) => i !== index);\n    onChange({ ...query, fieldMappings: updatedMappings });\n  };\n\n  const updateFieldMapping = (index: number, field: keyof FieldMapping, value: string) => {\n    const updatedMappings = [...(query.fieldMappings || [])];\n    updatedMappings[index] = { ...updatedMappings[index], [field]: value };\n    onChange({ ...query, fieldMappings: updatedMappings });\n  };\n\n  const applyFieldMappings = async () => {\n    // Validate field mappings\n    const invalidMappings = (query.fieldMappings || []).filter(\n      mapping => !mapping.fieldName.trim() || !mapping.sourcePath.trim()\n    );\n    \n    if (invalidMappings.length > 0) {\n      alert('Please fill in all field names and source paths before applying mappings.');\n      return;\n    }\n    \n    // Apply the mappings by running a test query\n    try {\n      setIsTestingQuery(true);\n      const testQueryData = { \n        ...query, \n        limit: Math.min(query.limit || 25, 100), // Reasonable limit for testing\n        discoverSchema: false \n      };\n      onChange(testQueryData);\n      setTimeout(() => {\n        onRunQuery();\n        // Show success message\n        setShowSuccessMessage(true);\n        setTimeout(() => {\n          setShowSuccessMessage(false);\n        }, 3000);\n      }, 100);\n    } catch (error) {\n      console.error('Failed to apply field mappings:', error);\n      alert('Failed to apply field mappings. Please check your configuration.');\n    } finally {\n      setTimeout(() => setIsTestingQuery(false), 2000);\n    }\n  };\n\n  const { partiql, table, partitionKeyName, partitionKeyValue, sortKeyName, sortKeyValue, limit, outputFormat, fieldMappings } = query;\n\n  const outputFormatOptions = [\n    { label: 'Auto-detect', value: 'auto' },\n    { label: 'Table View', value: 'table' },\n    { label: 'Geomap', value: 'geomap' },\n    { label: 'Time Series', value: 'timeseries' }\n  ];\n\n  const dataTypeOptions = [\n    { label: 'String', value: 'string' },\n    { label: 'Number', value: 'number' },\n    { label: 'Boolean', value: 'boolean' },\n    { label: 'Time', value: 'time' },\n    { label: 'JSON', value: 'json' }\n  ];\n\n  return (\n    <div className={styles.container}>\n      {/* Query Type Selection */}\n      <div className={styles.querySection}>\n        <RadioButtonGroup\n          options={[\n            { label: 'PartiQL Query', value: 'partiql' },\n            { label: 'Key Query', value: 'key' },\n          ]}\n          value={queryMode}\n          onChange={(value) => {\n            if (value === 'partiql') {\n              onChange({\n                ...query,\n                queryMode: 'partiql',\n                partiql: query.partiql ?? 'SELECT * FROM \"YourTableName\"',\n              });\n            } else {\n              onChange({\n                ...query,\n                queryMode: 'key',\n                partiql: undefined,\n              });\n            }\n          }}\n        />\n      </div>\n\n      {/* Query Configuration */}\n      <div className={styles.querySection}>\n        {queryMode === 'partiql' ? (\n          <div>\n            <div className={styles.fieldContainer}>\n              <label className={styles.fieldLabel}>PartiQL Query</label>\n              <Input\n                placeholder='SELECT * FROM \"YourTableName\"'\n                value={partiql ?? ''}\n                onChange={onFieldChange('partiql')}\n                onBlur={onRunQuery}\n              />\n              \n              {/* Template Variable Validation Warnings and Errors */}\n              {(() => {\n                const validation = validateTemplateVariables(partiql || '');\n                const hasIssues = validation.warnings.length > 0 || validation.errors.length > 0;\n                \n                if (hasIssues) {\n                  return (\n                    <div style={{ marginTop: theme.spacing(1) }}>\n                      {validation.errors.map((error, index) => (\n                        <Alert key={`error-${index}`} severity=\"error\" title=\"Template Variable Error\">\n                          {error}\n                        </Alert>\n                      ))}\n                      {validation.warnings.map((warning, index) => (\n                        <Alert key={`warning-${index}`} severity=\"warning\" title=\"Template Variable Warning\">\n                          {warning}\n                        </Alert>\n                      ))}\n                    </div>\n                  );\n                }\n                return null;\n              })()}\n            </div>\n            \n            {/* Template Variables Help Section */}\n            <div style={{ marginTop: theme.spacing(1) }}>\n              <Button\n                variant=\"secondary\"\n                size=\"sm\"\n                icon={showTemplateVariableHelp ? \"angle-down\" : \"angle-right\"}\n                fill=\"text\"\n                onClick={() => setShowTemplateVariableHelp(!showTemplateVariableHelp)}\n              >\n                Template Variables ({availableVariables.length} available)\n              </Button>\n            </div>\n\n            {showTemplateVariableHelp && (\n              <div className={styles.advancedSection}>\n                <h4 style={{ margin: 0, marginBottom: theme.spacing(1) }}>Template Variable Usage</h4>\n                \n                {/* Enhanced Variable Suggestions with Descriptions */}\n                {variableSuggestions.length > 0 && (\n                  <div style={{ marginBottom: theme.spacing(2) }}>\n                    <label className={styles.fieldLabel}>Available Variables with Descriptions:</label>\n                    <div style={{ marginTop: theme.spacing(1) }}>\n                      {variableSuggestions.map((suggestion, index) => (\n                        <div \n                          key={index}\n                          style={{ \n                            display: 'flex',\n                            alignItems: 'center',\n                            gap: theme.spacing(1),\n                            marginBottom: theme.spacing(0.5),\n                            padding: theme.spacing(0.5),\n                            background: theme.colors.background.secondary,\n                            borderRadius: theme.shape.borderRadius(),\n                            border: `1px solid ${theme.colors.border.weak}`\n                          }}\n                        >\n                          <code style={{ \n                            background: theme.colors.primary.main,\n                            color: theme.colors.primary.contrastText,\n                            padding: '2px 6px',\n                            borderRadius: theme.shape.borderRadius(),\n                            fontSize: theme.typography.bodySmall.fontSize,\n                            fontWeight: theme.typography.fontWeightMedium,\n                            minWidth: '120px',\n                            textAlign: 'center'\n                          }}>\n                            {suggestion.label}\n                          </code>\n                          <span style={{ \n                            fontSize: theme.typography.bodySmall.fontSize,\n                            color: theme.colors.text.secondary\n                          }}>\n                            {suggestion.detail}\n                          </span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                {/* Fallback to simple variable list if detailed suggestions not available */}\n                {variableSuggestions.length === 0 && availableVariables.length > 0 && (\n                  <div style={{ marginBottom: theme.spacing(2) }}>\n                    <label className={styles.fieldLabel}>Available Variables:</label>\n                    <div style={{ \n                      display: 'flex', \n                      flexWrap: 'wrap', \n                      gap: theme.spacing(0.5),\n                      marginTop: theme.spacing(0.5)\n                    }}>\n                      {availableVariables.map((variable) => (\n                        <code \n                          key={variable}\n                          style={{ \n                            background: theme.colors.background.secondary,\n                            padding: '2px 6px',\n                            borderRadius: theme.shape.borderRadius(),\n                            fontSize: theme.typography.bodySmall.fontSize,\n                            border: `1px solid ${theme.colors.border.weak}`\n                          }}\n                        >\n                          {variable}\n                        </code>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                <div className={styles.infoText}>\n                  <strong>PartiQL Template Variable Examples:</strong>\n                  <br/>• <code>SELECT * FROM &quot;$table_name&quot; WHERE status = &quot;$status&quot;</code>\n                  <br/>• <code>SELECT * FROM &quot;users&quot; WHERE region IN ($regions)</code>\n                  <br/>• <code>SELECT * FROM &quot;logs&quot; WHERE $__timeFilter</code>\n                  <br/>• <code>SELECT * FROM &quot;events&quot; WHERE userId = &quot;{'${user_id}'}&quot; AND $__timeFilter</code>\n                  <br/>• <code>SELECT * FROM &quot;logs&quot; WHERE timestamp BETWEEN $__from AND $__to</code>\n                  <br/><br/>\n                  <strong>Variable Syntax:</strong>\n                  <br/>• <code>$variable</code> - Simple variable substitution\n                  <br/>• <code>{'${variable}'}</code> - Variable in middle of expression\n                  <br/>• <code>$__timeFilter</code> - Automatic time range filtering (when enabled)\n                  <br/>• <code>$__from</code>, <code>$__to</code> - Built-in time range variables\n                  <br/>• Multi-value variables automatically format as comma-separated quoted values\n                  <br/><br/>\n                  <strong>⚠️ Important:</strong> Don&apos;t use <code>LIMIT</code> in PartiQL queries. Use the &quot;Limit&quot; field below instead.\n                </div>\n              </div>\n            )}\n            \n            {/* Limit field for PartiQL queries */}\n            <div className={`${styles.formRow} ${styles.mobileStack}`} style={{ marginTop: theme.spacing(2) }}>\n              <div className={styles.smallFieldContainer}>\n                <label className={styles.fieldLabel}>Limit</label>\n                <Input \n                  type=\"number\" \n                  placeholder=\"100\" \n                  value={limit || 100} \n                  onChange={onLimitChange} \n                />\n              </div>\n              \n              <div className={styles.fieldContainer}>\n                <label className={styles.fieldLabel}>Output Format</label>\n                <Select\n                  value={outputFormatOptions.find(opt => opt.value === outputFormat)}\n                  options={outputFormatOptions}\n                  onChange={onOutputFormatChange}\n                />\n              </div>\n            </div>\n\n            {/* Time Filtering Section for PartiQL */}\n            <div className={`${styles.formRow} ${styles.mobileStack}`} style={{ marginTop: theme.spacing(2) }}>\n              <InlineField label=\"Enable Time Filtering\" labelWidth={20}>\n                <InlineSwitch\n                  value={query.timeFilterEnabled || false}\n                  onChange={(event) => {\n                    const enabled = event.currentTarget.checked;\n                    onChange({ \n                      ...query, \n                      timeFilterEnabled: enabled,\n                      // Clear time values if disabling\n                      timeFrom: enabled ? query.timeFrom : undefined,\n                      timeTo: enabled ? query.timeTo : undefined\n                    });\n                  }}\n                />\n              </InlineField>\n            </div>\n            \n            {query.timeFilterEnabled && (\n              <div className={`${styles.formRow} ${styles.mobileStack}`}>\n                <div className={styles.fieldContainer}>\n                  <label className={styles.fieldLabel}>Timestamp Field Name</label>\n                  <Input \n                    placeholder=\"timestamp\" \n                    value={query.timestampField || 'timestamp'} \n                    onChange={(e: ChangeEvent<HTMLInputElement>) => {\n                      onChange({ ...query, timestampField: e.target.value });\n                    }}\n                  />\n                </div>\n              </div>\n            )}\n            \n            <div className={styles.buttonGroup}>\n              <Button \n                className={styles.testQueryButton}\n                variant=\"primary\" \n                size=\"sm\" \n                icon=\"play\"\n                disabled={isTestingQuery}\n                onClick={testQuery}\n              >\n                {isTestingQuery ? 'Testing...' : 'Test Query'}\n              </Button>\n              \n              <Button \n                variant=\"secondary\" \n                size=\"sm\" \n                icon=\"search\"\n                onClick={generateFieldMappingsFromData}\n                disabled={isDiscovering}\n              >\n                {isDiscovering ? 'Discovering Fields...' : 'Discover Schema'}\n              </Button>\n            </div>\n          </div>\n        ) : (\n          <div>\n            {/* Table Name Row */}\n            <div className={`${styles.formRow} ${styles.mobileStack}`}>\n              <div className={styles.fieldContainer}>\n                <label className={styles.fieldLabel}>Table Name</label>\n                <Input \n                  placeholder=\"YourTableName or $table_name\" \n                  value={table || ''} \n                  onChange={onFieldChange('table')} \n                />\n                {availableVariables.length > 0 && (\n                  <div className={styles.infoText} style={{ marginTop: theme.spacing(0.5) }}>\n                    💡 Use template variables: {availableVariables.slice(0, 3).join(', ')}\n                    {availableVariables.length > 3 && ` and ${availableVariables.length - 3} more`}\n                  </div>\n                )}\n              </div>\n              \n              <div style={{ alignSelf: 'flex-end' }}>\n                <Button \n                  variant=\"secondary\" \n                  size=\"sm\" \n                  icon=\"search\"\n                  disabled={isDiscovering}\n                  onClick={discoverSchema}\n                >\n                  {isDiscovering ? 'Discovering...' : 'Discover Schema'}\n                </Button>\n              </div>\n            </div>\n            \n            {/* Partition Key Row */}\n            <div className={`${styles.keyValueRow} ${styles.mobileStack}`}>\n              <div className={styles.smallFieldContainer}>\n                <label className={styles.fieldLabel}>Partition Key</label>\n                <Input \n                  placeholder=\"id\" \n                  value={partitionKeyName || ''} \n                  onChange={onFieldChange('partitionKeyName')} \n                />\n              </div>\n              <span className={styles.equalSign}>=</span>\n              <div className={styles.fieldContainer}>\n                <label className={styles.fieldLabel}>Partition Key Value</label>\n                <Input \n                  placeholder=\"0009 or $user_id (or empty for all)\" \n                  value={partitionKeyValue || ''} \n                  onChange={onFieldChange('partitionKeyValue')} \n                />\n              </div>\n            </div>\n            \n            {/* Sort Key Row */}\n            <div className={`${styles.keyValueRow} ${styles.mobileStack}`}>\n              <div className={styles.smallFieldContainer}>\n                <label className={styles.fieldLabel}>Sort Key</label>\n                <Input \n                  placeholder=\"Timestamp (optional)\" \n                  value={sortKeyName || ''} \n                  onChange={onFieldChange('sortKeyName')} \n                />\n              </div>\n              <span className={styles.equalSign}>=</span>\n              <div className={styles.fieldContainer}>\n                <label className={styles.fieldLabel}>Sort Key Value</label>\n                <Input \n                  placeholder=\"1753765220, $timestamp, or use time filtering below\" \n                  value={sortKeyValue || ''} \n                  onChange={onFieldChange('sortKeyValue')} \n                />\n              </div>\n            </div>\n            \n            {/* Time Filtering Section */}\n            <div className={`${styles.formRow} ${styles.mobileStack}`}>\n              <div style={{ marginBottom: theme.spacing(1), fontSize: theme.typography.bodySmall.fontSize, color: theme.colors.text.secondary }}>\n                💡 Time filtering automatically applies a WHERE condition to filter results by timestamp field\n              </div>\n              <InlineField label=\"Enable Time Filtering\" labelWidth={20}>\n                <InlineSwitch\n                  value={query.timeFilterEnabled || false}\n                  onChange={(event) => {\n                    const enabled = event.currentTarget.checked;\n                    onChange({ \n                      ...query, \n                      timeFilterEnabled: enabled,\n                      // Clear time values if disabling\n                      timeFrom: enabled ? query.timeFrom : undefined,\n                      timeTo: enabled ? query.timeTo : undefined\n                    });\n                  }}\n                />\n              </InlineField>\n            </div>\n            \n            {query.timeFilterEnabled && (\n              <>\n                <div className={`${styles.formRow} ${styles.mobileStack}`}>\n                  <div className={styles.fieldContainer}>\n                    <label className={styles.fieldLabel}>Timestamp Field Name</label>\n                    <Input \n                      placeholder=\"timestamp\" \n                      value={query.timestampField || 'timestamp'} \n                      onChange={(e: ChangeEvent<HTMLInputElement>) => {\n                        onChange({ ...query, timestampField: e.target.value });\n                      }}\n                    />\n                  </div>\n                </div>\n                \n                <div className={`${styles.formRow} ${styles.mobileStack}`}>\n                  <div className={styles.fieldContainer}>\n                    <label className={styles.fieldLabel}>From Date/Time</label>\n                    <DateTimePicker\n                      date={query.timeFrom ? dateTime(query.timeFrom) : dateTime().subtract(24, 'hours')}\n                      onChange={(newTime?: DateTime) => {\n                        if (newTime) {\n                          onChange({ ...query, timeFrom: newTime.toISOString() });\n                        }\n                      }}\n                    />\n                  </div>\n                  \n                  <div className={styles.fieldContainer}>\n                    <label className={styles.fieldLabel}>To Date/Time</label>\n                    <DateTimePicker\n                      date={query.timeTo ? dateTime(query.timeTo) : dateTime()}\n                      onChange={(newTime?: DateTime) => {\n                        if (newTime) {\n                          onChange({ ...query, timeTo: newTime.toISOString() });\n                        }\n                      }}\n                    />\n                  </div>\n                </div>\n              </>\n            )}\n            \n            {/* Limit and Output Format Row */}\n            <div className={`${styles.formRow} ${styles.mobileStack}`}>\n              <div className={styles.smallFieldContainer}>\n                <label className={styles.fieldLabel}>Limit</label>\n                <Input \n                  type=\"number\" \n                  placeholder=\"100\" \n                  value={limit || 100} \n                  onChange={onLimitChange} \n                />\n              </div>\n              \n              <div className={styles.fieldContainer}>\n                <label className={styles.fieldLabel}>Output Format</label>\n                <Select\n                  value={outputFormatOptions.find(opt => opt.value === outputFormat)}\n                  options={outputFormatOptions}\n                  onChange={onOutputFormatChange}\n                />\n              </div>\n            </div>\n\n            {/* Primary Action Buttons */}\n            <div className={styles.buttonGroup}>\n              <Button \n                className={styles.testQueryButton}\n                variant=\"primary\" \n                size=\"md\" \n                icon=\"play\"\n                disabled={isTestingQuery}\n                onClick={testQuery}\n              >\n                {isTestingQuery ? 'Executing Query...' : 'Run Query'}\n              </Button>\n              \n              <Button \n                variant=\"secondary\" \n                size=\"md\" \n                icon=\"search\"\n                onClick={generateFieldMappingsFromData}\n                disabled={isDiscovering}\n              >\n                {isDiscovering ? 'Discovering Fields...' : 'Discover Schema'}\n              </Button>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Advanced Field Mapping */}\n      <div>\n        <Button\n          variant=\"secondary\"\n          size=\"sm\"\n          icon={showAdvanced ? \"angle-down\" : \"angle-right\"}\n          fill=\"outline\"\n          onClick={() => setShowAdvanced(!showAdvanced)}\n        >\n          Advanced Field Mapping ({(fieldMappings || []).length} fields)\n        </Button>\n      </div>\n\n      {showAdvanced && (\n        <div className={styles.advancedSection}>\n          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '16px' }}>\n            <h4 style={{ margin: 0 }}>Field Mappings</h4>\n            <div style={{ display: 'flex', gap: '8px' }}>\n              <Button variant=\"secondary\" size=\"sm\" icon=\"plus\" onClick={addFieldMapping}>\n                Add Field\n              </Button>\n              <Button \n                variant=\"primary\" \n                size=\"sm\" \n                icon=\"check\"\n                onClick={applyFieldMappings}\n                disabled={(fieldMappings || []).length === 0}\n              >\n                Apply Mappings\n              </Button>\n            </div>\n          </div>\n\n          {showSuccessMessage && (\n            <div className={styles.successMessage}>\n              ✅ Field mappings applied successfully! Check the results below.\n            </div>\n          )}\n\n          {(fieldMappings || []).map((mapping, index) => (\n            <div key={index} className={styles.fieldMappingCard}>\n              <div className={styles.responsiveGrid}>\n                <div className={styles.fieldContainer}>\n                  <label className={styles.fieldLabel}>Field Name</label>\n                  <Input\n                    value={mapping.fieldName}\n                    onChange={(e: ChangeEvent<HTMLInputElement>) => updateFieldMapping(index, 'fieldName', e.target.value)}\n                    placeholder=\"Display name (e.g., 'User ID')\"\n                  />\n                </div>\n                \n                <div className={styles.fieldContainer}>\n                  <label className={styles.fieldLabel}>Source Path</label>\n                  <Input\n                    value={mapping.sourcePath}\n                    onChange={(e: ChangeEvent<HTMLInputElement>) => updateFieldMapping(index, 'sourcePath', e.target.value)}\n                    placeholder=\"Data path (e.g., 'user.id', 'items[0].name')\"\n                  />\n                </div>\n                \n                <div className={styles.smallFieldContainer}>\n                  <label className={styles.fieldLabel}>Data Type</label>\n                  <Select\n                    value={dataTypeOptions.find(opt => opt.value === mapping.dataType)}\n                    options={dataTypeOptions}\n                    onChange={(value) => updateFieldMapping(index, 'dataType', value.value || 'string')}\n                  />\n                </div>\n                \n                <div className={styles.fieldContainer}>\n                  <label className={styles.fieldLabel}>Transform</label>\n                  <Input\n                    value={mapping.transformation || ''}\n                    onChange={(e: ChangeEvent<HTMLInputElement>) => updateFieldMapping(index, 'transformation', e.target.value)}\n                    placeholder=\"parseFloat, timestamp\"\n                  />\n                </div>\n                \n                <div style={{ display: 'flex', alignItems: 'flex-end', marginTop: '20px' }}>\n                  <Button\n                    variant=\"destructive\"\n                    size=\"sm\"\n                    icon=\"trash-alt\"\n                    onClick={() => removeFieldMapping(index)}\n                  />\n                </div>\n              </div>\n            </div>\n          ))}\n\n          {(fieldMappings || []).length === 0 && (\n            <Alert severity=\"info\" title=\"No field mappings configured\">\n              <strong>Quick Start:</strong>\n              <br/>1. Click <strong>&quot;Discover Schema&quot;</strong> above to automatically analyze your table\n              <br/>2. Or manually add field mappings using the <strong>&quot;Add Field&quot;</strong> button\n              <br/>3. Click <strong>&quot;Apply Mappings&quot;</strong> to test your configuration\n              <br/><br/>\n              <strong>Field Mapping Examples:</strong>\n              <br/>• Field Name: &quot;User ID&quot; → Source Path: &quot;userId&quot; → Type: &quot;string&quot;\n              <br/>• Field Name: &quot;Location&quot; → Source Path: &quot;geo.coordinates&quot; → Type: &quot;json&quot;\n              <br/>• Field Name: &quot;Score&quot; → Source Path: &quot;metrics.score&quot; → Type: &quot;number&quot;\n            </Alert>\n          )}\n\n        </div>\n      )}\n    </div>\n  );\n}\n","import { DataSourcePlugin } from '@grafana/data';\nimport { FluvioDataSourceOptions, DynamoQuery } from './types';\nimport { DataSource } from './datasource';\nimport { ConfigEditor } from './components/ConfigEditor';\nimport { QueryEditor } from './components/QueryEditor';\n\nexport const plugin = new DataSourcePlugin<DataSource, DynamoQuery, FluvioDataSourceOptions>(DataSource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor);\n"],"names":["module","exports","__WEBPACK_EXTERNAL_MODULE__7__","__WEBPACK_EXTERNAL_MODULE__89__","__WEBPACK_EXTERNAL_MODULE__269__","__WEBPACK_EXTERNAL_MODULE__308__","__WEBPACK_EXTERNAL_MODULE__531__","__WEBPACK_EXTERNAL_MODULE__781__","__WEBPACK_EXTERNAL_MODULE__959__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","p","slice","lastIndexOf","DEFAULT_QUERY","limit","outputFormat","fieldMappings","discoverSchema","timeFilterEnabled","timestampField","queryMode","isDevelopmentMode","window","location","hostname","port","devLog","message","args","devWarn","console","warn","DataSource","DataSourceWithBackend","getDefaultQuery","app","filterQuery","query","partiql","table","applyTemplateVariables","scopedVars","filters","Date","now","variables","this","buildVariablesContext","interpolatedQuery","interpolateQueryFields","fromUnix","toUnix","fromIso","toIso","resolveTimeRange","__from","toString","text","__to","__fromIso","__toIso","timeRange","intervalSeconds","Math","max","floor","__interval","__interval_ms","interpolateString","quotedTimeField","formatPartiqlIdentifier","timeFilterValue","__timeFilter","__timeFilterIso","__timeFilterMs","length","adhocConditions","map","filter","mapFilterOperator","operator","formatFilterValue","join","__adhocFilters","timeFrom","timeTo","interpolatePartiQLQuery","partitionKeyName","partitionKeyValue","sortKeyName","sortKeyValue","mapping","sourcePath","fieldName","processedQuery","templateSrv","replace","variable","Array","isArray","multi","v","test","includes","keys","error","devError","defaultFrom","defaultTo","fromMs","toMs","coerceToMillis","from","min","to","toISOString","candidate","Number","isFinite","normalizeEpoch","trimmed","trim","numeric","isNaN","parsed","parse","time","getTime","toMillis","millis","valueOf","valueOfResult","iso","identifier","split","segment","startsWith","endsWith","getVariables","name","getVariablesSuggestions","label","detail","insertText","type","validateTemplateVariables","queryString","errors","variablePattern","availableVars","Set","substring","match","exec","variableName","has","push","constructor","instanceSettings","super","getTemplateSrv","url","id","jsonData","region","AWS_REGIONS","extractFieldPaths","prefix","paths","traverse","current","currentPath","arrayPath","forEach","newPath","path","determineDataType","getValueByPath","arrayKey","indexStr","index","parseInt","plugin","DataSourcePlugin","setConfigEditor","options","onOptionsChange","styles","theme","container","css","configSection","colors","background","secondary","border","weak","shape","borderRadius","spacing","formRow","fieldContainer","fieldLabel","typography","bodySmall","fontSize","fontWeightMedium","primary","alertSection","sectionHeader","h5","fontWeight","credentialsInfo","permissionsInfo","info","transparent","canvas","fontFamilyMonospace","getConfigStyles","useTheme2","secureJsonFields","secureJsonData","onSecretChange","field","e","target","onResetSecret","isConfigured","accessKey","secretKey","div","className","Alert","severity","title","style","marginTop","Button","variant","size","onClick","Select","placeholder","find","onChange","Input","endpoint","SecretInput","onReset","strong","br","code","setQueryEditor","onRunQuery","datasource","responsiveGrid","smallFieldContainer","keyValueRow","equalSign","querySection","mobileStack","testQueryButton","main","contrastText","shade","action","disabledBackground","disabledText","buttonGroup","successMessage","success","advancedSection","fieldMappingCard","medium","infoText","getStyles","showAdvanced","setShowAdvanced","useState","isDiscovering","setIsDiscovering","isTestingQuery","setIsTestingQuery","showSuccessMessage","setShowSuccessMessage","showTemplateVariableHelp","setShowTemplateVariableHelp","availableVariables","React","variableSuggestions","onFieldChange","onLimitChange","onOutputFormatChange","generateFieldMappingsFromData","hasPartiql","Boolean","hasTable","response","schemaQuery","refId","originalQuery","queryRequest","targets","range","dateTime","subtract","raw","interval","intervalMs","maxDataPoints","timezone","CoreApp","Explore","requestId","startTime","queryObservable","firstValueFrom","data","schemaFrame","discoveredMappings","fields","fieldPathField","f","dataTypeField","sampleValueField","values","i","fieldPath","dataType","cleanFieldName","updatedQuery","alert","fallbackMappings","discoveredFields","rawJsonField","sampleSize","allFieldPaths","rawJson","parsedData","JSON","add","sortedPaths","sort","maxFields","firstRecord","sampleValue","pop","tryFallbackSchemaAnalysis","fallbackError","testQuery","testQueryData","setTimeout","updateFieldMapping","updatedMappings","outputFormatOptions","dataTypeOptions","RadioButtonGroup","onBlur","validation","queryText","warnings","isValid","err","partiqlValidation","validatePartiQLQuery","referencedVariables","builtInVariables","availableVarNames","varName","warning","icon","fill","h4","margin","marginBottom","suggestion","display","alignItems","gap","padding","color","minWidth","textAlign","span","flexWrap","opt","InlineField","labelWidth","InlineSwitch","event","enabled","currentTarget","checked","disabled","alignSelf","discoveryQuery","DateTimePicker","date","newTime","justifyContent","transformation","_","removeFieldMapping"],"sourceRoot":""}