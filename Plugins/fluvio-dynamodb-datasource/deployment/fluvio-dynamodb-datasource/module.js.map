{"version":3,"file":"module.js","mappings":"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","sources":["webpack://fluvio-dynamodb-datasource/external amd \"@grafana/ui\"","webpack://fluvio-dynamodb-datasource/external amd \"@emotion/css\"","webpack://fluvio-dynamodb-datasource/external amd \"rxjs\"","webpack://fluvio-dynamodb-datasource/external amd \"module\"","webpack://fluvio-dynamodb-datasource/external amd \"@grafana/runtime\"","webpack://fluvio-dynamodb-datasource/external amd \"@grafana/data\"","webpack://fluvio-dynamodb-datasource/external amd \"react\"","webpack://fluvio-dynamodb-datasource/webpack/bootstrap","webpack://fluvio-dynamodb-datasource/webpack/runtime/compat get default export","webpack://fluvio-dynamodb-datasource/webpack/runtime/define property getters","webpack://fluvio-dynamodb-datasource/webpack/runtime/hasOwnProperty shorthand","webpack://fluvio-dynamodb-datasource/webpack/runtime/make namespace object","webpack://fluvio-dynamodb-datasource/webpack/runtime/publicPath","webpack://fluvio-dynamodb-datasource/./node_modules/grafana-public-path.js","webpack://fluvio-dynamodb-datasource/./types.ts","webpack://fluvio-dynamodb-datasource/./datasource.ts","webpack://fluvio-dynamodb-datasource/./components/ConfigEditor.tsx","webpack://fluvio-dynamodb-datasource/./components/QueryEditor.tsx","webpack://fluvio-dynamodb-datasource/./module.ts"],"sourcesContent":["module.exports = __WEBPACK_EXTERNAL_MODULE__7__;","module.exports = __WEBPACK_EXTERNAL_MODULE__89__;","module.exports = __WEBPACK_EXTERNAL_MODULE__269__;","module.exports = __WEBPACK_EXTERNAL_MODULE__308__;","module.exports = __WEBPACK_EXTERNAL_MODULE__531__;","module.exports = __WEBPACK_EXTERNAL_MODULE__781__;","module.exports = __WEBPACK_EXTERNAL_MODULE__959__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"public/plugins/fluvio-dynamodb-datasource/\";","\nimport amdMetaModule from 'amd-module';\n\n__webpack_public_path__ =\n  amdMetaModule && amdMetaModule.uri\n    ? amdMetaModule.uri.slice(0, amdMetaModule.uri.lastIndexOf('/') + 1)\n    : 'public/plugins/fluvio-dynamodb-datasource/';\n","import { DataSourceJsonData } from '@grafana/data';\nimport { DataQuery } from '@grafana/schema';\n\n// Field mapping configuration for dynamic data transformation\nexport interface FieldMapping {\n  fieldName: string;          // Display name in Grafana\n  sourcePath: string;         // JSONPath to source data (e.g., \"location.lat\", \"nested.array[0].value\")\n  dataType: 'string' | 'number' | 'boolean' | 'time' | 'json';\n  transformation?: string;    // Optional transformation (e.g., \"parseFloat\", \"new Date()\", \"JSON.stringify\")\n}\n\n// Query model sent from Grafana to the backend.\nexport interface DynamoQuery extends DataQuery {\n  // Basic query parameters\n  partiql?: string;\n  table?: string;\n  partitionKeyName?: string;\n  partitionKeyValue?: string;\n  sortKeyName?: string;\n  sortKeyValue?: string;\n  limit?: number;\n  \n  // Time filtering\n  timeFilterEnabled?: boolean;\n  timestampField?: string;      // Field name to filter on (default: \"timestamp\")\n  timeFrom?: string;            // ISO date string for start time\n  timeTo?: string;              // ISO date string for end time\n  \n  // Dynamic field mapping and transformation\n  fieldMappings?: FieldMapping[];\n  outputFormat?: 'auto' | 'table' | 'geomap' | 'timeseries';\n  \n  // Schema discovery\n  discoverSchema?: boolean;\n}\n\n// Default values for a new query\nexport const DEFAULT_QUERY: Partial<DynamoQuery> = {\n  limit: 100,\n  outputFormat: 'auto',\n  fieldMappings: [],\n  discoverSchema: false,\n  timeFilterEnabled: false,\n  timestampField: 'timestamp'\n};\n\n// Data source configuration options (saved in Grafana)\nexport interface FluvioDataSourceOptions extends DataSourceJsonData {\n  region?: string;\n  endpoint?: string;\n}\n\n// Secure fields stored only in the backend\nexport interface FluvioSecureJsonData {\n  accessKey?: string;\n  secretKey?: string;\n  // Note: sessionToken removed - this plugin is optimized for permanent IAM credentials\n}\n","import {\n  DataSourceInstanceSettings,\n  CoreApp,\n} from '@grafana/data';\nimport { DataSourceWithBackend } from '@grafana/runtime';\nimport { DynamoQuery, FluvioDataSourceOptions, DEFAULT_QUERY } from './types';\n\nexport class DataSource extends DataSourceWithBackend<DynamoQuery, FluvioDataSourceOptions> {\n  instanceSettings: DataSourceInstanceSettings<FluvioDataSourceOptions>;\n\n  constructor(instanceSettings: DataSourceInstanceSettings<FluvioDataSourceOptions>) {\n    super(instanceSettings);\n    this.instanceSettings = instanceSettings;\n  }\n\n  // Default query shown when adding a new panel\n  getDefaultQuery(app: CoreApp): Partial<DynamoQuery> {\n    return DEFAULT_QUERY;\n  }\n\n  // Return false to prevent queries with no input\n  filterQuery(query: DynamoQuery): boolean {\n    return !!query.partiql || !!query.table;\n  }\n\n  // DataSourceWithBackend automatically handles query() and testDatasource() methods\n}\n","import React, { ChangeEvent } from 'react';\nimport { Input, SecretInput, Select, Alert, Button, useTheme2 } from '@grafana/ui';\nimport { DataSourcePluginOptionsEditorProps, SelectableValue, GrafanaTheme2 } from '@grafana/data';\nimport { css } from '@emotion/css';\nimport { FluvioDataSourceOptions, FluvioSecureJsonData } from '../types';\n\nconst AWS_REGIONS = [\n  { label: 'US East (N. Virginia) - us-east-1', value: 'us-east-1' },\n  { label: 'US East (Ohio) - us-east-2', value: 'us-east-2' },\n  { label: 'US West (N. California) - us-west-1', value: 'us-west-1' },\n  { label: 'US West (Oregon) - us-west-2', value: 'us-west-2' },\n  { label: 'Asia Pacific (Sydney) - ap-southeast-2', value: 'ap-southeast-2' },\n  { label: 'Asia Pacific (Singapore) - ap-southeast-1', value: 'ap-southeast-1' },\n  { label: 'Asia Pacific (Tokyo) - ap-northeast-1', value: 'ap-northeast-1' },\n  { label: 'Asia Pacific (Seoul) - ap-northeast-2', value: 'ap-northeast-2' },\n  { label: 'Asia Pacific (Mumbai) - ap-south-1', value: 'ap-south-1' },\n  { label: 'Europe (Ireland) - eu-west-1', value: 'eu-west-1' },\n  { label: 'Europe (London) - eu-west-2', value: 'eu-west-2' },\n  { label: 'Europe (Frankfurt) - eu-central-1', value: 'eu-central-1' },\n  { label: 'Europe (Stockholm) - eu-north-1', value: 'eu-north-1' },\n  { label: 'Canada (Central) - ca-central-1', value: 'ca-central-1' },\n  { label: 'South America (São Paulo) - sa-east-1', value: 'sa-east-1' },\n];\n\n// Responsive styling functions for ConfigEditor\nconst getConfigStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    max-width: 100%;\n    overflow: hidden;\n  `,\n  \n  configSection: css`\n    background: ${theme.colors.background.secondary};\n    border: 1px solid ${theme.colors.border.weak};\n    border-radius: ${theme.shape.borderRadius()};\n    padding: ${theme.spacing(2)};\n    margin: ${theme.spacing(1)} 0;\n  `,\n  \n  formRow: css`\n    display: flex;\n    flex-wrap: wrap;\n    gap: ${theme.spacing(2)};\n    align-items: flex-start;\n    width: 100%;\n    margin-bottom: ${theme.spacing(2)};\n    \n    @media (max-width: 768px) {\n      flex-direction: column;\n      align-items: stretch;\n      gap: ${theme.spacing(1)};\n    }\n  `,\n  \n  fieldContainer: css`\n    display: flex;\n    flex-direction: column;\n    flex: 1;\n    min-width: 250px;\n    \n    @media (max-width: 768px) {\n      min-width: 100%;\n      margin-bottom: ${theme.spacing(1)};\n    }\n  `,\n  \n  fieldLabel: css`\n    font-size: ${theme.typography.bodySmall.fontSize};\n    font-weight: ${theme.typography.fontWeightMedium};\n    color: ${theme.colors.text.primary};\n    margin-bottom: ${theme.spacing(0.5)};\n  `,\n  \n  alertSection: css`\n    margin-bottom: ${theme.spacing(2)};\n  `,\n  \n  sectionHeader: css`\n    display: flex;\n    align-items: center;\n    gap: ${theme.spacing(1)};\n    margin-bottom: ${theme.spacing(2)};\n    font-size: ${theme.typography.h5.fontSize};\n    font-weight: ${theme.typography.h5.fontWeight};\n    color: ${theme.colors.text.primary};\n  `,\n  \n  credentialsInfo: css`\n    font-size: ${theme.typography.bodySmall.fontSize};\n    color: ${theme.colors.text.secondary};\n    margin-bottom: ${theme.spacing(2)};\n  `,\n  \n  permissionsInfo: css`\n    background: ${theme.colors.info.transparent};\n    border: 1px solid ${theme.colors.info.border};\n    border-radius: ${theme.shape.borderRadius()};\n    padding: ${theme.spacing(2)};\n    font-size: ${theme.typography.bodySmall.fontSize};\n    color: ${theme.colors.text.primary};\n    \n    code {\n      background: ${theme.colors.background.canvas};\n      padding: 2px 4px;\n      border-radius: 2px;\n      font-family: ${theme.typography.fontFamilyMonospace};\n    }\n  `\n});\n\ntype Props = DataSourcePluginOptionsEditorProps<FluvioDataSourceOptions, FluvioSecureJsonData>;\n\nexport function ConfigEditor({ options, onOptionsChange }: Props) {\n  const theme = useTheme2();\n  const styles = getConfigStyles(theme);\n  const { jsonData, secureJsonFields, secureJsonData } = options;\n\n  const onChange = (field: keyof FluvioDataSourceOptions) => (e: ChangeEvent<HTMLInputElement>) => {\n    onOptionsChange({\n      ...options,\n      jsonData: {\n        ...jsonData,\n        [field]: e.target.value,\n      },\n    });\n  };\n\n  const onRegionChange = (value: SelectableValue<string>) => {\n    onOptionsChange({\n      ...options,\n      jsonData: {\n        ...jsonData,\n        region: value.value || '',\n      },\n    });\n  };\n\n  const fillExampleValues = () => {\n    onOptionsChange({\n      ...options,\n      jsonData: {\n        ...jsonData,\n        region: 'ap-southeast-2',\n      },\n    });\n  };\n\n  const onSecretChange = (field: keyof FluvioSecureJsonData) => (e: ChangeEvent<HTMLInputElement>) => {\n    onOptionsChange({\n      ...options,\n      secureJsonData: {\n        ...secureJsonData,\n        [field]: e.target.value,\n      },\n    });\n  };\n\n  const onResetSecret = (field: keyof FluvioSecureJsonData) => () => {\n    onOptionsChange({\n      ...options,\n      secureJsonFields: {\n        ...secureJsonFields,\n        [field]: false,\n      },\n      secureJsonData: {\n        ...secureJsonData,\n        [field]: '',\n      },\n    });\n  };\n\n  const isConfigured = jsonData?.region && secureJsonFields?.accessKey && secureJsonFields?.secretKey;\n\n  return (\n    <div className={styles.container}>\n      {!isConfigured && (\n        <div className={styles.alertSection}>\n          <Alert severity=\"info\" title=\"Configuration Required\">\n            Configure your AWS region and permanent IAM credentials to connect to DynamoDB. Use long-term access keys for reliable access.\n            <div style={{ marginTop: '8px' }}>\n              <Button variant=\"secondary\" size=\"sm\" onClick={fillExampleValues}>\n                Use Example Region (ap-southeast-2)\n              </Button>\n            </div>\n          </Alert>\n        </div>\n      )}\n      \n      <div className={styles.configSection}>\n        <div className={styles.sectionHeader}>\n          🌍 AWS Configuration\n        </div>\n        \n        <div className={styles.formRow}>\n          <div className={styles.fieldContainer}>\n            <label className={styles.fieldLabel} title=\"Select the AWS region where your DynamoDB tables are located\">\n              AWS Region\n            </label>\n            <Select\n              placeholder=\"Select AWS region\"\n              value={AWS_REGIONS.find(r => r.value === jsonData?.region)}\n              options={AWS_REGIONS}\n              onChange={onRegionChange}\n            />\n          </div>\n        </div>\n        \n        <div className={styles.formRow}>\n          <div className={styles.fieldContainer}>\n            <label className={styles.fieldLabel} title=\"Optional: Custom DynamoDB endpoint URL for local development or VPC endpoints\">\n              Custom Endpoint\n            </label>\n            <Input\n              placeholder=\"https://dynamodb.ap-southeast-2.amazonaws.com (leave empty for default)\"\n              value={jsonData?.endpoint || ''}\n              onChange={onChange('endpoint')}\n            />\n          </div>\n        </div>\n      </div>\n\n      <div className={styles.configSection}>\n        <div className={styles.sectionHeader}>\n          🔐 AWS Credentials\n        </div>\n        \n        <div className={styles.credentialsInfo}>\n          Use permanent IAM user credentials (Access Key ID starting with AKIA*). \n          This plugin is optimized for long-term credentials that don't expire. \n          All credentials are stored securely and never visible in plain text.\n        </div>\n        \n        <div className={styles.formRow}>\n          <div className={styles.fieldContainer}>\n            <label className={styles.fieldLabel}>Access Key ID</label>\n            <SecretInput\n              isConfigured={secureJsonFields?.accessKey}\n              value={secureJsonData?.accessKey || ''}\n              placeholder=\"AKIA**************** (permanent access key)\"\n              onChange={onSecretChange('accessKey')}\n              onReset={onResetSecret('accessKey')}\n            />\n          </div>\n        </div>\n        \n        <div className={styles.formRow}>\n          <div className={styles.fieldContainer}>\n            <label className={styles.fieldLabel}>Secret Access Key</label>\n            <SecretInput\n              isConfigured={secureJsonFields?.secretKey}\n              value={secureJsonData?.secretKey || ''}\n              placeholder=\"Your AWS secret access key\"\n              onChange={onSecretChange('secretKey')}\n              onReset={onResetSecret('secretKey')}\n            />\n          </div>\n        </div>\n        \n        {/* Session token field removed - optimized for permanent credentials only */}\n\n      </div>\n\n      <div className={styles.permissionsInfo}>\n        💡 <strong>IAM Permissions Required:</strong><br/>\n        Your AWS user/role needs these DynamoDB permissions:<br/>\n        • <code>dynamodb:Query</code> - for key-based queries<br/>\n        • <code>dynamodb:Scan</code> - for table scans<br/>\n        • <code>dynamodb:ExecuteStatement</code> - for PartiQL queries<br/>\n        • <code>dynamodb:DescribeTable</code> - for table metadata<br/>\n        • <code>dynamodb:ListTables</code> - for connection testing\n      </div>\n    </div>\n  );\n}\n","import React, { ChangeEvent, useState } from 'react';\nimport { Input, RadioButtonGroup, Button, Select, Alert, useTheme2, InlineField, InlineSwitch, DateTimePicker } from '@grafana/ui'; \nimport { QueryEditorProps, SelectableValue, GrafanaTheme2, DataQueryRequest, DataFrame, CoreApp, TimeRange, dateTime, Field, DateTime } from '@grafana/data';\nimport { css } from '@emotion/css';\nimport { DataSource } from '../datasource';\nimport { FluvioDataSourceOptions, DynamoQuery, FieldMapping } from '../types';\nimport { firstValueFrom } from 'rxjs';\n\ntype Props = QueryEditorProps<DataSource, DynamoQuery, FluvioDataSourceOptions>;\n\n// Responsive styling functions\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    max-width: 100% !important;\n    overflow: hidden !important;\n    width: 100% !important;\n    box-sizing: border-box !important;\n  `,\n  \n  responsiveGrid: css`\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n    gap: ${theme.spacing(2)};\n    width: 100%;\n    \n    @media (max-width: 768px) {\n      grid-template-columns: 1fr;\n    }\n  `,\n  \n  formRow: css`\n    display: flex !important;\n    flex-wrap: wrap !important;\n    gap: ${theme.spacing(2)} !important;\n    align-items: flex-start !important;\n    width: 100% !important;\n    margin-bottom: ${theme.spacing(2)} !important;\n    box-sizing: border-box !important;\n    \n    /* Force wrapping on smaller screens */\n    @media (max-width: 1200px) {\n      flex-direction: column !important;\n      align-items: stretch !important;\n      gap: ${theme.spacing(1)} !important;\n    }\n    \n    /* Additional breakpoint for tablet */\n    @media (max-width: 768px) {\n      flex-direction: column !important;\n      align-items: stretch !important;\n      gap: ${theme.spacing(1)} !important;\n    }\n  `,\n  \n  fieldContainer: css`\n    display: flex !important;\n    flex-direction: column !important;\n    flex: 1 !important;\n    min-width: 200px !important;\n    box-sizing: border-box !important;\n    \n    @media (max-width: 1200px) {\n      min-width: 100% !important;\n      margin-bottom: ${theme.spacing(1)} !important;\n      flex: none !important;\n    }\n    \n    @media (max-width: 768px) {\n      min-width: 100% !important;\n      margin-bottom: ${theme.spacing(1)} !important;\n      flex: none !important;\n    }\n  `,\n  \n  smallFieldContainer: css`\n    display: flex;\n    flex-direction: column;\n    min-width: 150px;\n    \n    @media (max-width: 1024px) {\n      min-width: 100%;\n      margin-bottom: ${theme.spacing(1)};\n    }\n  `,\n  \n  fieldLabel: css`\n    font-size: ${theme.typography.bodySmall.fontSize};\n    font-weight: ${theme.typography.fontWeightMedium};\n    color: ${theme.colors.text.primary};\n    margin-bottom: ${theme.spacing(0.5)};\n  `,\n  \n  keyValueRow: css`\n    display: flex;\n    flex-wrap: wrap;\n    gap: ${theme.spacing(1)};\n    align-items: flex-end;\n    width: 100%;\n    margin-bottom: ${theme.spacing(2)};\n    \n    @media (max-width: 768px) {\n      flex-direction: column;\n      align-items: stretch;\n    }\n  `,\n  \n  equalSign: css`\n    align-self: flex-end;\n    padding: 0 ${theme.spacing(1)};\n    margin-bottom: 8px;\n    font-weight: bold;\n    color: ${theme.colors.text.secondary};\n    \n    @media (max-width: 768px) {\n      align-self: center;\n      margin: ${theme.spacing(0.5)} 0;\n    }\n  `,\n  \n  \n  querySection: css`\n    background: ${theme.colors.background.secondary} !important;\n    border: 1px solid ${theme.colors.border.weak} !important;\n    border-radius: ${theme.shape.borderRadius()} !important;\n    padding: ${theme.spacing(2)} !important;\n    margin: ${theme.spacing(1)} 0 !important;\n    width: 100% !important;\n    box-sizing: border-box !important;\n    overflow: hidden !important;\n  `,\n  \n  /* Alternative layout for mobile - force vertical stacking */\n  mobileStack: css`\n    @media (max-width: 1200px) {\n      display: block !important;\n      width: 100% !important;\n      \n      & > * {\n        display: block !important;\n        width: 100% !important;\n        margin-bottom: ${theme.spacing(2)} !important;\n        box-sizing: border-box !important;\n        float: none !important;\n        clear: both !important;\n      }\n      \n      /* Force all nested elements to be full width */\n      & input,\n      & button,\n      & [role=\"combobox\"],\n      & [class*=\"input\"],\n      & [class*=\"select\"] {\n        width: 100% !important;\n        max-width: none !important;\n        min-width: auto !important;\n        box-sizing: border-box !important;\n      }\n    }\n    \n    /* Even more aggressive - force on smaller screens */\n    @media (max-width: 768px) {\n      display: block !important;\n      width: 100% !important;\n      \n      & > * {\n        display: block !important;\n        width: 100% !important;\n        margin-bottom: ${theme.spacing(1)} !important;\n        box-sizing: border-box !important;\n        float: none !important;\n        clear: both !important;\n      }\n    }\n  `,\n  \n  testQueryButton: css`\n    background: ${theme.colors.primary.main};\n    color: ${theme.colors.primary.contrastText};\n    border: none;\n    font-weight: 500;\n    \n    &:hover {\n      background: ${theme.colors.primary.shade};\n    }\n    \n    &:disabled {\n      background: ${theme.colors.action.disabledBackground};\n      color: ${theme.colors.action.disabledText};\n    }\n  `,\n  \n  buttonGroup: css`\n    display: flex;\n    gap: ${theme.spacing(1)};\n    align-items: center;\n    margin-top: ${theme.spacing(2)};\n    \n    @media (max-width: 768px) {\n      flex-direction: column;\n      align-items: stretch;\n      \n      & > button {\n        width: 100%;\n      }\n    }\n  `,\n  \n  successMessage: css`\n    background: ${theme.colors.success.transparent};\n    border: 1px solid ${theme.colors.success.border};\n    border-radius: ${theme.shape.borderRadius()};\n    padding: ${theme.spacing(1)};\n    color: ${theme.colors.success.text};\n    font-size: ${theme.typography.bodySmall.fontSize};\n    margin-top: ${theme.spacing(1)};\n  `,\n  \n  advancedSection: css`\n    background: ${theme.colors.background.secondary};\n    border: 1px solid ${theme.colors.border.weak};\n    border-radius: ${theme.shape.borderRadius()};\n    padding: ${theme.spacing(2)};\n    margin-top: ${theme.spacing(2)};\n  `,\n  \n  fieldMappingCard: css`\n    background: ${theme.colors.background.primary};\n    border: 1px solid ${theme.colors.border.medium};\n    border-radius: ${theme.shape.borderRadius()};\n    padding: ${theme.spacing(2)};\n    margin: ${theme.spacing(1)} 0;\n  `,\n  \n  infoText: css`\n    font-size: ${theme.typography.bodySmall.fontSize};\n    color: ${theme.colors.text.secondary};\n    margin-top: ${theme.spacing(1)};\n  `\n});\n\n// Helper function to analyze data structure on the frontend\nconst tryFallbackSchemaAnalysis = async (originalQuery: DynamoQuery, datasource: DataSource): Promise<FieldMapping[]> => {\n  console.log('Starting fallback schema analysis...');\n  \n  // Run a normal query to get raw data\n  const dataQuery: DynamoQuery = {\n    ...originalQuery,\n    discoverSchema: false,\n    outputFormat: 'auto',\n    limit: originalQuery.limit || 100 // Use user's specified limit or default to 100\n  };\n  \n  const timeRange: TimeRange = {\n    from: dateTime().subtract(1, 'hour'),\n    to: dateTime(),\n    raw: { from: 'now-1h', to: 'now' }\n  };\n  \n  const queryRequest: DataQueryRequest<DynamoQuery> = {\n    targets: [dataQuery],\n    range: timeRange,\n    interval: '1s',\n    intervalMs: 1000,\n    maxDataPoints: 500,\n    scopedVars: {},\n    timezone: 'UTC',\n    app: CoreApp.Explore,\n    requestId: 'fallback_analysis',\n    startTime: Date.now()\n  };\n  \n  const response = await firstValueFrom(datasource.query(queryRequest));\n  console.log('Fallback query response:', response);\n  \n  const discoveredFields: FieldMapping[] = [];\n  \n  if (response.data && response.data.length > 0) {\n    const dataFrame = response.data[0] as DataFrame;\n    \n    // Look for raw_json field\n    const rawJsonField = dataFrame.fields.find((f: Field) => f.name === 'raw_json');\n    \n    if (rawJsonField && rawJsonField.values && rawJsonField.values.length > 0) {\n      console.log('Found raw_json field, analyzing structure...');\n      \n      // Parse the first few raw JSON records\n      const sampleSize = Math.min(3, rawJsonField.values.length);\n      const allFieldPaths = new Set<string>();\n      \n      for (let i = 0; i < sampleSize; i++) {\n        const rawJson = rawJsonField.values.get(i) as string;\n        try {\n          const parsedData = JSON.parse(rawJson);\n          const paths = extractFieldPaths(parsedData, '');\n          paths.forEach(path => allFieldPaths.add(path.path));\n        } catch (error) {\n          console.error('Failed to parse raw JSON:', error);\n        }\n      }\n      \n      // Create field mappings from discovered paths (limit to avoid UI overload)\n      const sortedPaths = Array.from(allFieldPaths).sort();\n      const maxFields = 40; // Limit to 40 fields to avoid UI overload\n      \n      sortedPaths.slice(0, maxFields).forEach(path => {\n        // Create a clean field name\n        const cleanFieldName = path.replace(/\\[.*?\\]/g, '').replace(/\\./g, '_');\n        \n        // Determine data type by sampling the field\n        let dataType: 'string' | 'number' | 'boolean' | 'time' | 'json' = 'string';\n        try {\n          const firstRecord = JSON.parse(rawJsonField.values.get(0) as string);\n          const sampleValue = getValueByPath(firstRecord, path);\n          dataType = determineDataType(sampleValue);\n        } catch {\n          dataType = 'string'; // Default fallback\n        }\n        \n        discoveredFields.push({\n          fieldName: cleanFieldName || path.split('.').pop() || 'field',\n          sourcePath: path,\n          dataType: dataType\n        });\n      });\n      \n      if (sortedPaths.length > maxFields) {\n        console.log(`Limited field discovery to ${maxFields} out of ${sortedPaths.length} total fields`);\n      }\n      \n      console.log(`Fallback analysis discovered ${discoveredFields.length} fields:`, discoveredFields);\n    }\n  }\n  \n  return discoveredFields;\n};\n\n// Helper function to extract all field paths from an object\nconst extractFieldPaths = (obj: any, prefix: string): Array<{path: string, type: string}> => {\n  const paths: Array<{path: string, type: string}> = [];\n  \n  const traverse = (current: any, currentPath: string) => {\n    if (current === null || current === undefined) {\n      return;\n    }\n    \n    if (typeof current === 'object' && !Array.isArray(current)) {\n      // Object - traverse properties\n      Object.keys(current).forEach(key => {\n        const newPath = currentPath ? `${currentPath}.${key}` : key;\n        \n        // Add this path\n        paths.push({\n          path: newPath,\n          type: determineDataType(current[key])\n        });\n        \n        // Recursively traverse if it's a nested object\n        if (typeof current[key] === 'object' && current[key] !== null && !Array.isArray(current[key])) {\n          traverse(current[key], newPath);\n        }\n      });\n    } else if (Array.isArray(current) && current.length > 0) {\n      // Array - analyze first element\n      const arrayPath = `${currentPath}[0]`;\n      traverse(current[0], arrayPath);\n    }\n  };\n  \n  traverse(obj, prefix);\n  return paths;\n};\n\n// Helper to get value by path\nconst getValueByPath = (obj: any, path: string): any => {\n  const keys = path.split('.');\n  let current = obj;\n  \n  for (const key of keys) {\n    if (key.includes('[')) {\n      const [arrayKey, indexStr] = key.split('[');\n      const index = parseInt(indexStr.replace(']', ''));\n      current = current?.[arrayKey]?.[index];\n    } else {\n      current = current?.[key];\n    }\n    \n    if (current === undefined || current === null) {\n      return undefined;\n    }\n  }\n  \n  return current;\n};\n\n// Helper to determine data type\nconst determineDataType = (value: any): 'string' | 'number' | 'boolean' | 'time' | 'json' => {\n  if (value === null || value === undefined) return 'string';\n  \n  if (typeof value === 'boolean') return 'boolean';\n  if (typeof value === 'number') return 'number';\n  \n  if (typeof value === 'string') {\n    // Check if it looks like a timestamp\n    if (/^\\d{10}$/.test(value) || /^\\d{13}$/.test(value)) {\n      return 'time';\n    }\n    // Check for ISO date strings\n    if (/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/.test(value)) {\n      return 'time';\n    }\n    return 'string';\n  }\n  \n  if (typeof value === 'object' && value !== null) return 'json';\n  \n  return 'string';\n};\n\nexport function QueryEditor({ query, onChange, onRunQuery, datasource }: Props) {\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n  const [showAdvanced, setShowAdvanced] = useState(false);\n  const [isDiscovering, setIsDiscovering] = useState(false);\n  const [isTestingQuery, setIsTestingQuery] = useState(false);\n  const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n\n  const onFieldChange = <T extends keyof DynamoQuery>(field: T) => (e: ChangeEvent<HTMLInputElement>) => {\n    onChange({ ...query, [field]: e.target.value });\n  };\n\n  const onLimitChange = (e: ChangeEvent<HTMLInputElement>) => {\n    onChange({ ...query, limit: parseInt(e.target.value, 10) || 100 });\n  };\n\n  const onOutputFormatChange = (value: SelectableValue<string>) => {\n    const outputFormat = value.value as 'auto' | 'table' | 'geomap' | 'timeseries' | undefined;\n    onChange({ ...query, outputFormat: outputFormat || 'auto' });\n  };\n\n  const discoverSchema = async () => {\n    if (!query.table) {\n      alert('Please enter a table name first');\n      return;\n    }\n    \n    setIsDiscovering(true);\n    try {\n      console.log('Discovering schema for table:', query.table, 'with limit:', query.limit || 100);\n      \n      // Use backend's schema discovery to analyze table structure\n      const discoveryQuery: DynamoQuery = { \n        ...query, \n        discoverSchema: true, // Backend returns schema information\n        fieldMappings: undefined, // Clear existing mappings\n        outputFormat: 'auto' as const, // Auto-detect best format\n        limit: query.limit || 100 // Use user's specified limit or default to 100\n      };\n      \n      console.log('Executing schema discovery for any table type...');\n      onChange(discoveryQuery);\n      onRunQuery();\n      \n      // The backend will analyze the actual data structure dynamically\n      alert('🔍 Discovering schema... The system is analyzing your table structure to understand the data format.');\n      \n    } catch (error) {\n      console.error('Schema discovery failed:', error);\n      alert('Schema discovery failed. Please check your table name and connection settings.');\n    } finally {\n      setTimeout(() => setIsDiscovering(false), 500);\n    }\n  };\n  \n  const generateFieldMappingsFromData = async () => {\n    if (!query.table) {\n      alert('Please enter a table name first to get sample data for field mapping');\n      return;\n    }\n    \n    setIsDiscovering(true);\n    try {\n      console.log('Starting dynamic schema discovery for table:', query.table, 'with limit:', query.limit || 100);\n      \n      // Step 1: Execute schema discovery query directly to get response\n      const schemaQuery: DynamoQuery = { \n        ...query, \n        discoverSchema: true, // Backend will return schema information\n        limit: query.limit || 100, // Use user's specified limit or default to 100\n        fieldMappings: undefined, // Clear existing mappings\n        refId: 'schema_discovery'\n      };\n      \n      console.log('Executing schema discovery query:', schemaQuery);\n      \n      // Store original query \n      const originalQuery = { ...query };\n      \n      // Execute the schema discovery query directly to get the response\n      const timeRange: TimeRange = {\n        from: dateTime().subtract(1, 'hour'),\n        to: dateTime(),\n        raw: { from: 'now-1h', to: 'now' }\n      };\n      \n      const queryRequest: DataQueryRequest<DynamoQuery> = {\n        targets: [schemaQuery],\n        range: timeRange,\n        interval: '1s',\n        intervalMs: 1000,\n        maxDataPoints: 500,\n        scopedVars: {},\n        timezone: 'UTC',\n        app: CoreApp.Explore,\n        requestId: 'schema_discovery',\n        startTime: Date.now()\n      };\n      \n      const queryObservable = datasource.query(queryRequest);\n      const response = await firstValueFrom(queryObservable);\n      \n      console.log('Schema discovery response:', response);\n      console.log('Response data length:', response.data?.length || 0);\n      if (response.data?.length > 0) {\n        console.log('First frame:', response.data[0]);\n        console.log('First frame fields:', response.data[0].fields);\n      }\n      \n      if (response.data && response.data.length > 0) {\n        const schemaFrame = response.data[0] as DataFrame;\n        console.log('Schema frame name:', schemaFrame.name);\n        console.log('Schema frame fields count:', schemaFrame.fields?.length || 0);\n        \n        const discoveredMappings: FieldMapping[] = [];\n        \n        // Parse schema frame to extract field information\n        // The backend returns: field_path, data_type, sample_value, frequency\n        if (schemaFrame.fields && schemaFrame.fields.length > 0) {\n          const fieldPathField = schemaFrame.fields.find((f: Field) => f.name === 'field_path');\n          const dataTypeField = schemaFrame.fields.find((f: Field) => f.name === 'data_type');\n          const sampleValueField = schemaFrame.fields.find((f: Field) => f.name === 'sample_value');\n          \n          console.log('Found fields:', {\n            fieldPath: !!fieldPathField,\n            dataType: !!dataTypeField,\n            sampleValue: !!sampleValueField\n          });\n          \n          if (fieldPathField && dataTypeField && fieldPathField.values) {\n            console.log('Processing discovered fields...');\n            \n            // Extract discovered fields from the response\n            for (let i = 0; i < fieldPathField.values.length; i++) {\n              const fieldPath = fieldPathField.values.get(i) as string;\n              const dataType = dataTypeField.values.get(i) as string;\n              const sampleValue = sampleValueField?.values.get(i) as string;\n              \n              if (fieldPath && dataType) {\n                // Create a clean field name from the path\n                const cleanFieldName = fieldPath.replace(/\\[.*?\\]/g, '').replace(/\\./g, '_');\n                \n                discoveredMappings.push({\n                  fieldName: cleanFieldName || fieldPath,\n                  sourcePath: fieldPath,\n                  dataType: dataType as 'string' | 'number' | 'boolean' | 'time' | 'json'\n                });\n                \n                console.log(`Discovered field: ${fieldPath} -> ${dataType} (sample: ${sampleValue})`);\n              }\n            }\n          }\n        }\n        \n        if (discoveredMappings.length > 0) {\n          // Update query with discovered field mappings\n          const updatedQuery = { \n            ...originalQuery, \n            fieldMappings: discoveredMappings,\n            outputFormat: 'table' as const, // Switch to table view to see the mapped fields\n            discoverSchema: false // Turn off schema discovery\n          };\n          \n          onChange(updatedQuery);\n          setShowAdvanced(true); // Show the advanced section so user can see the mappings\n          alert(`✅ Successfully discovered ${discoveredMappings.length} fields from ${query.limit || 100} records! Check the Advanced Field Mapping section below to customize as needed.`);\n          \n          console.log('Schema discovery completed successfully:', discoveredMappings);\n        } else {\n          console.log('No fields discovered from schema frame - trying fallback analysis');\n          // Fallback: Try to analyze the data on the frontend side\n          try {\n            const fallbackMappings = await tryFallbackSchemaAnalysis(originalQuery, datasource);\n            if (fallbackMappings.length > 0) {\n              const updatedQuery = { \n                ...originalQuery, \n                fieldMappings: fallbackMappings,\n                outputFormat: 'table' as const,\n                discoverSchema: false\n              };\n              \n              onChange(updatedQuery);\n              setShowAdvanced(true);\n              alert(`✅ Used fallback analysis and discovered ${fallbackMappings.length} fields! The backend schema discovery had issues, but we successfully analyzed your raw data directly. Check the Advanced Field Mapping section below.`);\n              return; // Success with fallback\n            }\n          } catch (fallbackError) {\n            console.error('Fallback analysis also failed:', fallbackError);\n          }\n          \n          alert('⚠️ No fields could be discovered from the schema response. The data structure might be too complex or there was an issue with field analysis. Try running a normal query first to verify your table access.');\n        }\n      } else {\n        console.log('Schema discovery response had no data frames');\n        if (response.error) {\n          console.error('Response error:', response.error);\n          alert(`❌ Schema discovery failed with error: ${response.error.message || 'Unknown error'}`);\n        } else {\n          alert('⚠️ Schema discovery returned no data frames. This could indicate:\\n• Table name is incorrect\\n• Table has no data\\n• Connection/permission issues\\n• Backend processing error\\n\\nTry running a normal query first to verify your table works.');\n        }\n      }\n      \n    } catch (error) {\n      console.error('Schema discovery failed:', error);\n      alert('❌ Schema discovery failed. Please check your table name, connection settings, and ensure the table contains data.');\n    } finally {\n      setIsDiscovering(false);\n    }\n  };\n\n  const testQuery = async () => {\n    // Validate query before testing\n    if (query.partiql) {\n      if (!query.partiql.trim()) {\n        alert('Please enter a PartiQL query first');\n        return;\n      }\n    } else {\n      if (!query.table) {\n        alert('Please enter a table name first');\n        return;\n      }\n    }\n    \n    setIsTestingQuery(true);\n    try {\n      // Run the query with user's limit (or reasonable default for testing)\n      const testQueryData = { \n        ...query, \n        limit: Math.min(query.limit || 1, 1000000), // Allow up to 100 records for testing, default 25\n        discoverSchema: false \n      };\n      onChange(testQueryData);\n      setTimeout(onRunQuery, 100);\n    } catch (error) {\n      console.error('Test query failed:', error);\n    } finally {\n      // Reset test state after a short delay\n      setTimeout(() => setIsTestingQuery(false), 2000);\n    }\n  };\n\n  const addFieldMapping = () => {\n    const newMapping: FieldMapping = {\n      fieldName: '',\n      sourcePath: '',\n      dataType: 'string'\n    };\n    const updatedMappings = [...(query.fieldMappings || []), newMapping];\n    onChange({ ...query, fieldMappings: updatedMappings });\n  };\n\n  const removeFieldMapping = (index: number) => {\n    const updatedMappings = (query.fieldMappings || []).filter((_, i) => i !== index);\n    onChange({ ...query, fieldMappings: updatedMappings });\n  };\n\n  const updateFieldMapping = (index: number, field: keyof FieldMapping, value: string) => {\n    const updatedMappings = [...(query.fieldMappings || [])];\n    updatedMappings[index] = { ...updatedMappings[index], [field]: value };\n    onChange({ ...query, fieldMappings: updatedMappings });\n  };\n\n  const applyFieldMappings = async () => {\n    // Validate field mappings\n    const invalidMappings = (query.fieldMappings || []).filter(\n      mapping => !mapping.fieldName.trim() || !mapping.sourcePath.trim()\n    );\n    \n    if (invalidMappings.length > 0) {\n      alert('Please fill in all field names and source paths before applying mappings.');\n      return;\n    }\n    \n    // Apply the mappings by running a test query\n    try {\n      setIsTestingQuery(true);\n      const testQueryData = { \n        ...query, \n        limit: Math.min(query.limit || 25, 100), // Reasonable limit for testing\n        discoverSchema: false \n      };\n      onChange(testQueryData);\n      setTimeout(() => {\n        onRunQuery();\n        // Show success message\n        setShowSuccessMessage(true);\n        setTimeout(() => {\n          setShowSuccessMessage(false);\n        }, 3000);\n      }, 100);\n    } catch (error) {\n      console.error('Failed to apply field mappings:', error);\n      alert('Failed to apply field mappings. Please check your configuration.');\n    } finally {\n      setTimeout(() => setIsTestingQuery(false), 2000);\n    }\n  };\n\n  const { partiql, table, partitionKeyName, partitionKeyValue, sortKeyName, sortKeyValue, limit, outputFormat, fieldMappings } = query;\n\n  const outputFormatOptions = [\n    { label: 'Auto-detect', value: 'auto' },\n    { label: 'Table View', value: 'table' },\n    { label: 'Geomap', value: 'geomap' },\n    { label: 'Time Series', value: 'timeseries' }\n  ];\n\n  const dataTypeOptions = [\n    { label: 'String', value: 'string' },\n    { label: 'Number', value: 'number' },\n    { label: 'Boolean', value: 'boolean' },\n    { label: 'Time', value: 'time' },\n    { label: 'JSON', value: 'json' }\n  ];\n\n  return (\n    <div className={styles.container}>\n      {/* Query Type Selection */}\n      <div className={styles.querySection}>\n        <RadioButtonGroup\n          options={[\n            { label: 'PartiQL Query', value: 'partiql' },\n            { label: 'Key Query', value: 'key' },\n          ]}\n          value={partiql ? 'partiql' : 'key'}\n          onChange={(value) => {\n            if (value === 'partiql') {\n              onChange({ ...query, partiql: query.partiql || 'SELECT * FROM \"YourTableName\" LIMIT 10' });\n            } else {\n              onChange({ ...query, partiql: undefined });\n            }\n          }}\n        />\n      </div>\n\n      {/* Query Configuration */}\n      <div className={styles.querySection}>\n        {partiql ? (\n          <div>\n            <div className={styles.fieldContainer}>\n              <label className={styles.fieldLabel}>PartiQL Query</label>\n              <Input\n                placeholder='SELECT * FROM \"YourTableName\" LIMIT 10'\n                value={partiql || ''}\n                onChange={onFieldChange('partiql')}\n                onBlur={onRunQuery}\n              />\n            </div>\n            \n            <div className={styles.buttonGroup}>\n              <Button \n                className={styles.testQueryButton}\n                variant=\"primary\" \n                size=\"sm\" \n                icon=\"play\"\n                disabled={isTestingQuery}\n                onClick={testQuery}\n              >\n                {isTestingQuery ? 'Testing...' : 'Test Query'}\n              </Button>\n            </div>\n          </div>\n        ) : (\n          <div>\n            {/* Table Name Row */}\n            <div className={`${styles.formRow} ${styles.mobileStack}`}>\n              <div className={styles.fieldContainer}>\n                <label className={styles.fieldLabel}>Table Name</label>\n                <Input \n                  placeholder=\"YourTableName\" \n                  value={table || ''} \n                  onChange={onFieldChange('table')} \n                />\n              </div>\n              \n              <div style={{ alignSelf: 'flex-end' }}>\n                <Button \n                  variant=\"secondary\" \n                  size=\"sm\" \n                  icon=\"search\"\n                  disabled={isDiscovering}\n                  onClick={discoverSchema}\n                >\n                  {isDiscovering ? 'Discovering...' : 'Discover Schema'}\n                </Button>\n              </div>\n            </div>\n            \n            {/* Partition Key Row */}\n            <div className={`${styles.keyValueRow} ${styles.mobileStack}`}>\n              <div className={styles.smallFieldContainer}>\n                <label className={styles.fieldLabel}>Partition Key</label>\n                <Input \n                  placeholder=\"id\" \n                  value={partitionKeyName || ''} \n                  onChange={onFieldChange('partitionKeyName')} \n                />\n              </div>\n              <span className={styles.equalSign}>=</span>\n              <div className={styles.fieldContainer}>\n                <label className={styles.fieldLabel}>Partition Key Value</label>\n                <Input \n                  placeholder=\"0009 (or empty for all)\" \n                  value={partitionKeyValue || ''} \n                  onChange={onFieldChange('partitionKeyValue')} \n                />\n              </div>\n            </div>\n            \n            {/* Sort Key Row */}\n            <div className={`${styles.keyValueRow} ${styles.mobileStack}`}>\n              <div className={styles.smallFieldContainer}>\n                <label className={styles.fieldLabel}>Sort Key</label>\n                <Input \n                  placeholder=\"Timestamp (optional)\" \n                  value={sortKeyName || ''} \n                  onChange={onFieldChange('sortKeyName')} \n                />\n              </div>\n              <span className={styles.equalSign}>=</span>\n              <div className={styles.fieldContainer}>\n                <label className={styles.fieldLabel}>Sort Key Value</label>\n                <Input \n                  placeholder=\"1753765220 (optional)\" \n                  value={sortKeyValue || ''} \n                  onChange={onFieldChange('sortKeyValue')} \n                />\n              </div>\n            </div>\n            \n            {/* Time Filtering Section */}\n            <div className={`${styles.formRow} ${styles.mobileStack}`}>\n              <InlineField label=\"Enable Time Filtering\" labelWidth={20}>\n                <InlineSwitch\n                  value={query.timeFilterEnabled || false}\n                  onChange={(event) => {\n                    const enabled = event.currentTarget.checked;\n                    onChange({ \n                      ...query, \n                      timeFilterEnabled: enabled,\n                      // Clear time values if disabling\n                      timeFrom: enabled ? query.timeFrom : undefined,\n                      timeTo: enabled ? query.timeTo : undefined\n                    });\n                  }}\n                />\n              </InlineField>\n            </div>\n            \n            {query.timeFilterEnabled && (\n              <>\n                <div className={`${styles.formRow} ${styles.mobileStack}`}>\n                  <div className={styles.fieldContainer}>\n                    <label className={styles.fieldLabel}>Timestamp Field Name</label>\n                    <Input \n                      placeholder=\"timestamp\" \n                      value={query.timestampField || 'timestamp'} \n                      onChange={(e: ChangeEvent<HTMLInputElement>) => {\n                        onChange({ ...query, timestampField: e.target.value });\n                      }}\n                    />\n                  </div>\n                </div>\n                \n                <div className={`${styles.formRow} ${styles.mobileStack}`}>\n                  <div className={styles.fieldContainer}>\n                    <label className={styles.fieldLabel}>From Date/Time</label>\n                    <DateTimePicker\n                      date={query.timeFrom ? dateTime(query.timeFrom) : dateTime().subtract(24, 'hours')}\n                      onChange={(newTime?: DateTime) => {\n                        if (newTime) {\n                          onChange({ ...query, timeFrom: newTime.toISOString() });\n                        }\n                      }}\n                    />\n                  </div>\n                  \n                  <div className={styles.fieldContainer}>\n                    <label className={styles.fieldLabel}>To Date/Time</label>\n                    <DateTimePicker\n                      date={query.timeTo ? dateTime(query.timeTo) : dateTime()}\n                      onChange={(newTime?: DateTime) => {\n                        if (newTime) {\n                          onChange({ ...query, timeTo: newTime.toISOString() });\n                        }\n                      }}\n                    />\n                  </div>\n                </div>\n              </>\n            )}\n            \n            {/* Limit and Output Format Row */}\n            <div className={`${styles.formRow} ${styles.mobileStack}`}>\n              <div className={styles.smallFieldContainer}>\n                <label className={styles.fieldLabel}>Limit</label>\n                <Input \n                  type=\"number\" \n                  placeholder=\"100\" \n                  value={limit || 100} \n                  onChange={onLimitChange} \n                />\n              </div>\n              \n              <div className={styles.fieldContainer}>\n                <label className={styles.fieldLabel}>Output Format</label>\n                <Select\n                  value={outputFormatOptions.find(opt => opt.value === outputFormat)}\n                  options={outputFormatOptions}\n                  onChange={onOutputFormatChange}\n                />\n              </div>\n            </div>\n\n            {/* Primary Action Buttons */}\n            <div className={styles.buttonGroup}>\n              <Button \n                className={styles.testQueryButton}\n                variant=\"primary\" \n                size=\"md\" \n                icon=\"play\"\n                disabled={isTestingQuery}\n                onClick={testQuery}\n              >\n                {isTestingQuery ? 'Executing Query...' : 'Run Query'}\n              </Button>\n              \n              <Button \n                variant=\"secondary\" \n                size=\"md\" \n                icon=\"search\"\n                onClick={generateFieldMappingsFromData}\n                disabled={isDiscovering}\n              >\n                {isDiscovering ? 'Discovering Fields...' : 'Discover Schema'}\n              </Button>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Advanced Field Mapping */}\n      <div>\n        <Button\n          variant=\"secondary\"\n          size=\"sm\"\n          icon={showAdvanced ? \"angle-down\" : \"angle-right\"}\n          fill=\"outline\"\n          onClick={() => setShowAdvanced(!showAdvanced)}\n        >\n          Advanced Field Mapping ({(fieldMappings || []).length} fields)\n        </Button>\n      </div>\n\n      {showAdvanced && (\n        <div className={styles.advancedSection}>\n          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '16px' }}>\n            <h4 style={{ margin: 0 }}>Field Mappings</h4>\n            <div style={{ display: 'flex', gap: '8px' }}>\n              <Button variant=\"secondary\" size=\"sm\" icon=\"plus\" onClick={addFieldMapping}>\n                Add Field\n              </Button>\n              <Button \n                variant=\"primary\" \n                size=\"sm\" \n                icon=\"check\"\n                onClick={applyFieldMappings}\n                disabled={(fieldMappings || []).length === 0}\n              >\n                Apply Mappings\n              </Button>\n            </div>\n          </div>\n\n          {showSuccessMessage && (\n            <div className={styles.successMessage}>\n              ✅ Field mappings applied successfully! Check the results below.\n            </div>\n          )}\n\n          {(fieldMappings || []).map((mapping, index) => (\n            <div key={index} className={styles.fieldMappingCard}>\n              <div className={styles.responsiveGrid}>\n                <div className={styles.fieldContainer}>\n                  <label className={styles.fieldLabel}>Field Name</label>\n                  <Input\n                    value={mapping.fieldName}\n                    onChange={(e: ChangeEvent<HTMLInputElement>) => updateFieldMapping(index, 'fieldName', e.target.value)}\n                    placeholder=\"Display name (e.g., 'User ID')\"\n                  />\n                </div>\n                \n                <div className={styles.fieldContainer}>\n                  <label className={styles.fieldLabel}>Source Path</label>\n                  <Input\n                    value={mapping.sourcePath}\n                    onChange={(e: ChangeEvent<HTMLInputElement>) => updateFieldMapping(index, 'sourcePath', e.target.value)}\n                    placeholder=\"Data path (e.g., 'user.id', 'items[0].name')\"\n                  />\n                </div>\n                \n                <div className={styles.smallFieldContainer}>\n                  <label className={styles.fieldLabel}>Data Type</label>\n                  <Select\n                    value={dataTypeOptions.find(opt => opt.value === mapping.dataType)}\n                    options={dataTypeOptions}\n                    onChange={(value) => updateFieldMapping(index, 'dataType', value.value || 'string')}\n                  />\n                </div>\n                \n                <div className={styles.fieldContainer}>\n                  <label className={styles.fieldLabel}>Transform</label>\n                  <Input\n                    value={mapping.transformation || ''}\n                    onChange={(e: ChangeEvent<HTMLInputElement>) => updateFieldMapping(index, 'transformation', e.target.value)}\n                    placeholder=\"parseFloat, timestamp\"\n                  />\n                </div>\n                \n                <div style={{ display: 'flex', alignItems: 'flex-end', marginTop: '20px' }}>\n                  <Button\n                    variant=\"destructive\"\n                    size=\"sm\"\n                    icon=\"trash-alt\"\n                    onClick={() => removeFieldMapping(index)}\n                  />\n                </div>\n              </div>\n            </div>\n          ))}\n\n          {(fieldMappings || []).length === 0 && (\n            <Alert severity=\"info\" title=\"No field mappings configured\">\n              <strong>Quick Start:</strong>\n              <br/>1. Click <strong>\"Discover Schema\"</strong> above to automatically analyze your table\n              <br/>2. Or manually add field mappings using the <strong>\"Add Field\"</strong> button\n              <br/>3. Click <strong>\"Apply Mappings\"</strong> to test your configuration\n              <br/><br/>\n              <strong>Field Mapping Examples:</strong>\n              <br/>• Field Name: \"User ID\" → Source Path: \"userId\" → Type: \"string\"\n              <br/>• Field Name: \"Location\" → Source Path: \"geo.coordinates\" → Type: \"json\"\n              <br/>• Field Name: \"Score\" → Source Path: \"metrics.score\" → Type: \"number\"\n            </Alert>\n          )}\n\n        </div>\n      )}\n    </div>\n  );\n}","import { DataSourcePlugin } from '@grafana/data';\nimport { FluvioDataSourceOptions, DynamoQuery } from './types';\nimport { DataSource } from './datasource';\nimport { ConfigEditor } from './components/ConfigEditor';\nimport { QueryEditor } from './components/QueryEditor';\n\nexport const plugin = new DataSourcePlugin<DataSource, DynamoQuery, FluvioDataSourceOptions>(DataSource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor);\n"],"names":["module","exports","__WEBPACK_EXTERNAL_MODULE__7__","__WEBPACK_EXTERNAL_MODULE__89__","__WEBPACK_EXTERNAL_MODULE__269__","__WEBPACK_EXTERNAL_MODULE__308__","__WEBPACK_EXTERNAL_MODULE__531__","__WEBPACK_EXTERNAL_MODULE__781__","__WEBPACK_EXTERNAL_MODULE__959__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","p","slice","lastIndexOf","DEFAULT_QUERY","limit","outputFormat","fieldMappings","discoverSchema","timeFilterEnabled","timestampField","DataSource","DataSourceWithBackend","getDefaultQuery","app","filterQuery","query","partiql","table","constructor","instanceSettings","super","this","AWS_REGIONS","label","extractFieldPaths","prefix","paths","traverse","current","currentPath","Array","isArray","length","arrayPath","keys","forEach","newPath","push","path","type","determineDataType","getValueByPath","split","includes","arrayKey","indexStr","index","parseInt","replace","test","plugin","DataSourcePlugin","setConfigEditor","options","onOptionsChange","styles","theme","container","css","configSection","colors","background","secondary","border","weak","shape","borderRadius","spacing","formRow","fieldContainer","fieldLabel","typography","bodySmall","fontSize","fontWeightMedium","text","primary","alertSection","sectionHeader","h5","fontWeight","credentialsInfo","permissionsInfo","info","transparent","canvas","fontFamilyMonospace","getConfigStyles","useTheme2","jsonData","secureJsonFields","secureJsonData","onSecretChange","field","e","target","onResetSecret","isConfigured","region","accessKey","secretKey","div","className","Alert","severity","title","style","marginTop","Button","variant","size","onClick","Select","placeholder","find","onChange","Input","endpoint","SecretInput","onReset","strong","br","code","setQueryEditor","onRunQuery","datasource","responsiveGrid","smallFieldContainer","keyValueRow","equalSign","querySection","mobileStack","testQueryButton","main","contrastText","shade","action","disabledBackground","disabledText","buttonGroup","successMessage","success","advancedSection","fieldMappingCard","medium","infoText","getStyles","showAdvanced","setShowAdvanced","useState","isDiscovering","setIsDiscovering","isTestingQuery","setIsTestingQuery","showSuccessMessage","setShowSuccessMessage","onFieldChange","testQuery","trim","alert","testQueryData","Math","min","setTimeout","error","console","updateFieldMapping","updatedMappings","partitionKeyName","partitionKeyValue","sortKeyName","sortKeyValue","outputFormatOptions","dataTypeOptions","RadioButtonGroup","onBlur","icon","disabled","alignSelf","discoveryQuery","span","InlineField","labelWidth","InlineSwitch","event","enabled","currentTarget","checked","timeFrom","timeTo","DateTimePicker","date","dateTime","subtract","newTime","toISOString","opt","response","schemaQuery","refId","originalQuery","queryRequest","targets","range","from","to","raw","interval","intervalMs","maxDataPoints","scopedVars","timezone","CoreApp","Explore","requestId","startTime","Date","now","queryObservable","firstValueFrom","data","schemaFrame","discoveredMappings","fields","fieldPathField","f","name","dataTypeField","sampleValueField","values","i","fieldPath","dataType","cleanFieldName","fieldName","sourcePath","updatedQuery","fallbackMappings","discoveredFields","rawJsonField","sampleSize","allFieldPaths","Set","rawJson","parsedData","JSON","parse","add","sortedPaths","sort","maxFields","firstRecord","sampleValue","pop","tryFallbackSchemaAnalysis","fallbackError","message","fill","display","justifyContent","alignItems","marginBottom","h4","margin","gap","filter","mapping","map","transformation","_","removeFieldMapping"],"sourceRoot":""}