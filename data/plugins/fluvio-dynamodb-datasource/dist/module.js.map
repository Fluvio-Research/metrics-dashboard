{"version":3,"file":"module.js","mappings":"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","sources":["webpack://fluvio-dynamodb-datasource/external amd \"@grafana/ui\"","webpack://fluvio-dynamodb-datasource/external amd \"@emotion/css\"","webpack://fluvio-dynamodb-datasource/external amd \"rxjs\"","webpack://fluvio-dynamodb-datasource/external amd \"module\"","webpack://fluvio-dynamodb-datasource/external amd \"@grafana/runtime\"","webpack://fluvio-dynamodb-datasource/external amd \"@grafana/data\"","webpack://fluvio-dynamodb-datasource/external amd \"react\"","webpack://fluvio-dynamodb-datasource/webpack/bootstrap","webpack://fluvio-dynamodb-datasource/webpack/runtime/compat get default export","webpack://fluvio-dynamodb-datasource/webpack/runtime/define property getters","webpack://fluvio-dynamodb-datasource/webpack/runtime/hasOwnProperty shorthand","webpack://fluvio-dynamodb-datasource/webpack/runtime/make namespace object","webpack://fluvio-dynamodb-datasource/webpack/runtime/publicPath","webpack://fluvio-dynamodb-datasource/./node_modules/grafana-public-path.js","webpack://fluvio-dynamodb-datasource/./types.ts","webpack://fluvio-dynamodb-datasource/./datasource.ts","webpack://fluvio-dynamodb-datasource/./components/ConfigEditor.tsx","webpack://fluvio-dynamodb-datasource/./components/QueryEditor.tsx","webpack://fluvio-dynamodb-datasource/./module.ts"],"sourcesContent":["module.exports = __WEBPACK_EXTERNAL_MODULE__7__;","module.exports = __WEBPACK_EXTERNAL_MODULE__89__;","module.exports = __WEBPACK_EXTERNAL_MODULE__269__;","module.exports = __WEBPACK_EXTERNAL_MODULE__308__;","module.exports = __WEBPACK_EXTERNAL_MODULE__531__;","module.exports = __WEBPACK_EXTERNAL_MODULE__781__;","module.exports = __WEBPACK_EXTERNAL_MODULE__959__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"public/plugins/fluvio-dynamodb-datasource/\";","\nimport amdMetaModule from 'amd-module';\n\n__webpack_public_path__ =\n  amdMetaModule && amdMetaModule.uri\n    ? amdMetaModule.uri.slice(0, amdMetaModule.uri.lastIndexOf('/') + 1)\n    : 'public/plugins/fluvio-dynamodb-datasource/';\n","import { DataSourceJsonData } from '@grafana/data';\nimport { DataQuery } from '@grafana/schema';\n\n// Field mapping configuration for dynamic data transformation\nexport interface FieldMapping {\n  fieldName: string;          // Display name in Grafana\n  sourcePath: string;         // JSONPath to source data (e.g., \"location.lat\", \"nested.array[0].value\")\n  dataType: 'string' | 'number' | 'boolean' | 'time' | 'json';\n  transformation?: string;    // Optional transformation (e.g., \"parseFloat\", \"new Date()\", \"JSON.stringify\")\n}\n\n// Query model sent from Grafana to the backend.\nexport interface DynamoQuery extends DataQuery {\n  // Basic query parameters\n  partiql?: string;\n  table?: string;\n  partitionKeyName?: string;\n  partitionKeyValue?: string;\n  partitionKeyMode?: 'single' | 'in';\n  partitionKeyValues?: string[];\n  sortKeyName?: string;\n  sortKeyValue?: string;\n  sortKeyOperator?: 'eq' | 'begins_with' | 'between' | 'in' | 'gt' | 'gte' | 'lt' | 'lte';\n  sortKeyRangeStart?: string;\n  sortKeyRangeEnd?: string;\n  sortKeyValues?: string[];     // For IN operator on sort key\n  sortDirection?: 'asc' | 'desc';\n  limit?: number;\n  \n  // Query mode state\n  queryMode?: 'partiql' | 'key';\n\n  // Time filtering\n  timeFilterEnabled?: boolean;\n  timestampField?: string;      // Field name to filter on (default: \"timestamp\")\n  timeFrom?: string;            // ISO date string for start time\n  timeTo?: string;              // ISO date string for end time\n  \n  // Dynamic field mapping and transformation\n  fieldMappings?: FieldMapping[];\n  outputFormat?: 'auto' | 'table' | 'geomap' | 'timeseries';\n  \n  // Schema discovery\n  discoverSchema?: boolean;\n}\n\n// Default values for a new query\nexport const DEFAULT_QUERY: Partial<DynamoQuery> = {\n  limit: 100,\n  outputFormat: 'auto',\n  fieldMappings: [],\n  discoverSchema: false,\n  timeFilterEnabled: false,\n  timestampField: 'timestamp',\n  queryMode: 'key',\n  partitionKeyMode: 'single',\n  sortKeyOperator: 'eq',\n  sortDirection: 'asc',\n};\n\n// Data source configuration options (saved in Grafana)\nexport interface FluvioDataSourceOptions extends DataSourceJsonData {\n  region?: string;\n  endpoint?: string;\n}\n\n// Secure fields stored only in the backend\nexport interface FluvioSecureJsonData {\n  accessKey?: string;\n  secretKey?: string;\n  // Note: sessionToken removed - this plugin is optimized for permanent IAM credentials\n}\n","import {\n  DataSourceInstanceSettings,\n  CoreApp,\n  ScopedVars,\n  AdHocVariableFilter,\n} from '@grafana/data';\nimport { DataSourceWithBackend, getTemplateSrv, TemplateSrv } from '@grafana/runtime';\nimport { DynamoQuery, FluvioDataSourceOptions, DEFAULT_QUERY } from './types';\n\nexport class DataSource extends DataSourceWithBackend<DynamoQuery, FluvioDataSourceOptions> {\n  instanceSettings: DataSourceInstanceSettings<FluvioDataSourceOptions>;\n  templateSrv: TemplateSrv;\n\n  constructor(instanceSettings: DataSourceInstanceSettings<FluvioDataSourceOptions>) {\n    super(instanceSettings);\n    this.instanceSettings = instanceSettings;\n    this.templateSrv = getTemplateSrv();\n    \n    // Force visible debug to confirm plugin is loading\n    console.error('🚀 FLUVIO DYNAMODB PLUGIN LOADED!', Date.now());\n    console.warn('🚀 Instance Settings:', instanceSettings);\n  }\n\n  // Default query shown when adding a new panel\n  getDefaultQuery(app: CoreApp): Partial<DynamoQuery> {\n    return DEFAULT_QUERY;\n  }\n\n  // Return false to prevent queries with no input\n  filterQuery(query: DynamoQuery): boolean {\n    return !!query.partiql || !!query.table;\n  }\n\n  // Apply template variables to queries before sending to backend\n  applyTemplateVariables(query: DynamoQuery, scopedVars: ScopedVars, filters?: AdHocVariableFilter[]): DynamoQuery {\n    console.log('🔍 PLUGIN DEBUG: applyTemplateVariables called!', Date.now());\n    console.log('🔍 SCOPED VARS:', scopedVars);\n    console.log('🔍 QUERY:', query);\n\n    // Only get time from Grafana time picker when timestamp filtering is enabled\n    if (query.timeFilterEnabled && scopedVars.__from && scopedVars.__to) {\n      query.timeFrom = new Date(scopedVars.__from.value).toISOString();\n      query.timeTo = new Date(scopedVars.__to.value).toISOString();\n      console.log('🔍 Got time from Grafana time picker:', {\n        timeFrom: query.timeFrom,\n        timeTo: query.timeTo\n      });\n    }\n    const variables = { ...scopedVars };\n\n    const { fromUnix, toUnix, fromIso, toIso } = this.resolveTimeRange(scopedVars, query);\n\n    // Debug logging for time range\n    console.log('DEBUG: Time range calculation:', {\n      fromUnix, toUnix, fromIso, toIso,\n      scopedVars: scopedVars,\n      timeFilterEnabled: query.timeFilterEnabled,\n      timestampField: query.timestampField\n    });\n\n    variables.__from = { value: fromUnix.toString() };\n    variables.__to = { value: toUnix.toString() };\n    variables.__fromIso = { value: fromIso };\n    variables.__toIso = { value: toIso };\n    variables.__interval = { value: '$__interval' };\n    variables.__interval_ms = { value: '$__interval_ms' };\n\n    // Handle time filter for PartiQL queries\n    const interpolatedTimestampField = query.timestampField\n      ? this.templateSrv.replace(query.timestampField, variables)\n      : query.timestampField;\n    const effectiveTimeField = interpolatedTimestampField || 'timestamp';\n    const quotedTimeField = this.formatPartiqlIdentifier(effectiveTimeField);\n\n    // Always set the __timeFilter variable\n    if (query.timeFilterEnabled) {\n      const timeFilterValue = `${quotedTimeField} BETWEEN ${fromUnix} AND ${toUnix}`;\n      console.log('DEBUG: Creating time filter:', timeFilterValue);\n      variables.__timeFilter = {\n        value: timeFilterValue,\n      };\n    } else {\n      console.log('DEBUG: Time filter disabled, using 1=1');\n      // When time filter is disabled, replace with a condition that's always true\n      variables.__timeFilter = {\n        value: '1=1',\n      };\n    }\n\n    const interpolatedQuery = {\n      ...query,\n      timeFrom: fromIso,\n      timeTo: toIso,\n      partiql: query.partiql\n        ? (() => {\n            const originalQuery = query.partiql;\n            const replacedQuery = this.templateSrv.replace(query.partiql, variables);\n            console.log('DEBUG: PartiQL replacement:', {\n              original: originalQuery,\n              replaced: replacedQuery,\n              timeFilterEnabled: query.timeFilterEnabled\n            });\n            return replacedQuery;\n          })()\n        : query.partiql,\n      table: query.table ? this.templateSrv.replace(query.table, variables) : query.table,\n      partitionKeyName: query.partitionKeyName\n        ? this.templateSrv.replace(query.partitionKeyName, variables)\n        : query.partitionKeyName,\n      partitionKeyMode: query.partitionKeyMode,\n      partitionKeyValues: query.partitionKeyValues\n        ? query.partitionKeyValues\n            .map((value) => this.templateSrv.replace(value, variables))\n            .filter((value) => value !== '')\n        : query.partitionKeyValues,\n      partitionKeyValue: query.partitionKeyValue\n        ? this.templateSrv.replace(query.partitionKeyValue, variables)\n        : query.partitionKeyValue,\n      sortKeyName: query.sortKeyName\n        ? this.templateSrv.replace(query.sortKeyName, variables)\n        : query.sortKeyName,\n      sortKeyValue: query.sortKeyValue\n        ? this.templateSrv.replace(query.sortKeyValue, variables)\n        : query.sortKeyValue,\n      sortKeyOperator: query.sortKeyOperator,\n      sortKeyRangeStart: query.sortKeyRangeStart\n        ? this.templateSrv.replace(query.sortKeyRangeStart, variables)\n        : query.sortKeyRangeStart,\n      sortKeyRangeEnd: query.sortKeyRangeEnd\n        ? this.templateSrv.replace(query.sortKeyRangeEnd, variables)\n        : query.sortKeyRangeEnd,\n      sortKeyValues: query.sortKeyValues\n        ? query.sortKeyValues\n            .map((value) => this.templateSrv.replace(value, variables))\n            .filter((value) => value !== '')\n        : query.sortKeyValues,\n      sortDirection: query.sortDirection,\n      timestampField: interpolatedTimestampField,\n      fieldMappings:\n        query.fieldMappings?.map((mapping) => ({\n          ...mapping,\n          sourcePath: this.templateSrv.replace(mapping.sourcePath, variables),\n          fieldName: this.templateSrv.replace(mapping.fieldName, variables),\n        })) || query.fieldMappings,\n    };\n\n    return interpolatedQuery;\n  }\n\n\n\n  private resolveTimeRange(scopedVars: ScopedVars, query: DynamoQuery) {\n    const now = Date.now();\n    const defaultFrom = now - 24 * 60 * 60 * 1000;\n    const defaultTo = now;\n\n    let fromMs: number | undefined;\n    let toMs: number | undefined;\n\n    // Only use time from Grafana time picker when available\n    if (scopedVars.__from?.value !== undefined) {\n      fromMs = this.coerceToMillis(scopedVars.__from.value);\n    }\n    if (scopedVars.__to?.value !== undefined) {\n      toMs = this.coerceToMillis(scopedVars.__to.value);\n    }\n\n    // Check query object if scopedVars don't have time\n    if (!fromMs && query.timeFrom) {\n      fromMs = this.coerceToMillis(query.timeFrom);\n    }\n    if (!toMs && query.timeTo) {\n      toMs = this.coerceToMillis(query.timeTo);\n    }\n\n    // Fallback to defaults\n    fromMs = fromMs ?? defaultFrom;\n    toMs = toMs ?? defaultTo;\n\n    const from = Math.min(fromMs, toMs);\n    const to = Math.max(fromMs, toMs);\n\n    return {\n      fromUnix: Math.floor(from / 1000),\n      toUnix: Math.floor(to / 1000),\n      fromIso: new Date(from).toISOString(),\n      toIso: new Date(to).toISOString(),\n    };\n  }\n\n  private coerceToMillis(candidate: any): number | undefined {\n    if (candidate === undefined || candidate === null) {\n      return undefined;\n    }\n\n    if (typeof candidate === 'number') {\n      if (!Number.isFinite(candidate)) {\n        return undefined;\n      }\n      return this.normalizeEpoch(candidate);\n    }\n\n    if (typeof candidate === 'string') {\n      const trimmed = candidate.trim();\n      if (trimmed === '') {\n        return undefined;\n      }\n\n      const numeric = Number(trimmed);\n      if (!Number.isNaN(numeric)) {\n        return this.normalizeEpoch(numeric);\n      }\n\n      const parsed = Date.parse(trimmed);\n      if (!Number.isNaN(parsed)) {\n        return parsed;\n      }\n\n      return undefined;\n    }\n\n    if (candidate instanceof Date) {\n      const time = candidate.getTime();\n      return Number.isFinite(time) ? time : undefined;\n    }\n\n    if (typeof (candidate as any).toMillis === 'function') {\n      const millis = (candidate as any).toMillis();\n      if (Number.isFinite(millis)) {\n        return millis;\n      }\n    }\n\n    if (typeof candidate.valueOf === 'function') {\n      const valueOfResult = candidate.valueOf();\n      if (typeof valueOfResult === 'number' && Number.isFinite(valueOfResult)) {\n        return this.normalizeEpoch(valueOfResult);\n      }\n    }\n\n    if (typeof (candidate as any).toISOString === 'function') {\n      const iso = (candidate as any).toISOString();\n      const parsed = Date.parse(iso);\n      if (!Number.isNaN(parsed)) {\n        return parsed;\n      }\n    }\n\n    return undefined;\n  }\n\n  private normalizeEpoch(value: number): number {\n    // Check if value looks like seconds (between 1970-2100 in seconds)\n    // Unix timestamp for Jan 1, 1970 = 0, Jan 1, 2100 ≈ 4.1e9\n    if (value >= 0 && value <= 4.1e9) {\n      return value * 1000; // Convert seconds to milliseconds\n    }\n    \n    // Check if value looks like milliseconds (between 1970-2100 in milliseconds)\n    // Unix timestamp for Jan 1, 1970 = 0ms, Jan 1, 2100 ≈ 4.1e12ms\n    if (value >= 0 && value <= 4.1e12) {\n      return value; // Already in milliseconds\n    }\n    \n    // For values outside reasonable timestamp ranges, return as-is\n    // This handles edge cases but may not be valid timestamps\n    return value;\n  }\n\n  private formatPartiqlIdentifier(identifier?: string): string {\n    if (!identifier) {\n      return '\"timestamp\"';\n    }\n\n    const trimmed = identifier.trim();\n\n    if (trimmed === '') {\n      return '\"timestamp\"';\n    }\n\n    // If identifier already contains quotes, parentheses, brackets, or spaces, assume user supplied a full expression\n    if (/[\"'\\s()\\[\\]]/.test(trimmed)) {\n      return trimmed;\n    }\n\n    // Quote each dot-delimited segment to protect reserved words\n    return trimmed\n      .split('.')\n      .map((segment) => `\"${segment.replace(/\"/g, '\"\"')}\"`)\n      .join('.');\n  }\n\n  // Get available template variables for UI hints\n  getVariables(): string[] {\n    return this.templateSrv.getVariables().map((v) => `$${v.name}`);\n  }\n\n\n  // DataSourceWithBackend automatically handles query() and testDatasource() methods\n}\n","import React, { ChangeEvent } from 'react';\nimport { Input, SecretInput, Select, Alert, Button, useTheme2 } from '@grafana/ui';\nimport { DataSourcePluginOptionsEditorProps, SelectableValue, GrafanaTheme2 } from '@grafana/data';\nimport { css } from '@emotion/css';\nimport { FluvioDataSourceOptions, FluvioSecureJsonData } from '../types';\n\nconst AWS_REGIONS = [\n  { label: 'US East (N. Virginia) - us-east-1', value: 'us-east-1' },\n  { label: 'US East (Ohio) - us-east-2', value: 'us-east-2' },\n  { label: 'US West (N. California) - us-west-1', value: 'us-west-1' },\n  { label: 'US West (Oregon) - us-west-2', value: 'us-west-2' },\n  { label: 'Asia Pacific (Sydney) - ap-southeast-2', value: 'ap-southeast-2' },\n  { label: 'Asia Pacific (Singapore) - ap-southeast-1', value: 'ap-southeast-1' },\n  { label: 'Asia Pacific (Tokyo) - ap-northeast-1', value: 'ap-northeast-1' },\n  { label: 'Asia Pacific (Seoul) - ap-northeast-2', value: 'ap-northeast-2' },\n  { label: 'Asia Pacific (Mumbai) - ap-south-1', value: 'ap-south-1' },\n  { label: 'Europe (Ireland) - eu-west-1', value: 'eu-west-1' },\n  { label: 'Europe (London) - eu-west-2', value: 'eu-west-2' },\n  { label: 'Europe (Frankfurt) - eu-central-1', value: 'eu-central-1' },\n  { label: 'Europe (Stockholm) - eu-north-1', value: 'eu-north-1' },\n  { label: 'Canada (Central) - ca-central-1', value: 'ca-central-1' },\n  { label: 'South America (São Paulo) - sa-east-1', value: 'sa-east-1' },\n];\n\n// Responsive styling functions for ConfigEditor\nconst getConfigStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    max-width: 100%;\n    overflow: hidden;\n  `,\n  \n  configSection: css`\n    background: ${theme.colors.background.secondary};\n    border: 1px solid ${theme.colors.border.weak};\n    border-radius: ${theme.shape.borderRadius()};\n    padding: ${theme.spacing(2)};\n    margin: ${theme.spacing(1)} 0;\n  `,\n  \n  formRow: css`\n    display: flex;\n    flex-wrap: wrap;\n    gap: ${theme.spacing(2)};\n    align-items: flex-start;\n    width: 100%;\n    margin-bottom: ${theme.spacing(2)};\n    \n    @media (max-width: 768px) {\n      flex-direction: column;\n      align-items: stretch;\n      gap: ${theme.spacing(1)};\n    }\n  `,\n  \n  fieldContainer: css`\n    display: flex;\n    flex-direction: column;\n    flex: 1;\n    min-width: 250px;\n    \n    @media (max-width: 768px) {\n      min-width: 100%;\n      margin-bottom: ${theme.spacing(1)};\n    }\n  `,\n  \n  fieldLabel: css`\n    font-size: ${theme.typography.bodySmall.fontSize};\n    font-weight: ${theme.typography.fontWeightMedium};\n    color: ${theme.colors.text.primary};\n    margin-bottom: ${theme.spacing(0.5)};\n  `,\n  \n  alertSection: css`\n    margin-bottom: ${theme.spacing(2)};\n  `,\n  \n  sectionHeader: css`\n    display: flex;\n    align-items: center;\n    gap: ${theme.spacing(1)};\n    margin-bottom: ${theme.spacing(2)};\n    font-size: ${theme.typography.h5.fontSize};\n    font-weight: ${theme.typography.h5.fontWeight};\n    color: ${theme.colors.text.primary};\n  `,\n  \n  credentialsInfo: css`\n    font-size: ${theme.typography.bodySmall.fontSize};\n    color: ${theme.colors.text.secondary};\n    margin-bottom: ${theme.spacing(2)};\n  `,\n  \n  permissionsInfo: css`\n    background: ${theme.colors.info.transparent};\n    border: 1px solid ${theme.colors.info.border};\n    border-radius: ${theme.shape.borderRadius()};\n    padding: ${theme.spacing(2)};\n    font-size: ${theme.typography.bodySmall.fontSize};\n    color: ${theme.colors.text.primary};\n    \n    code {\n      background: ${theme.colors.background.canvas};\n      padding: 2px 4px;\n      border-radius: 2px;\n      font-family: ${theme.typography.fontFamilyMonospace};\n    }\n  `\n});\n\ntype Props = DataSourcePluginOptionsEditorProps<FluvioDataSourceOptions, FluvioSecureJsonData>;\n\nexport function ConfigEditor({ options, onOptionsChange }: Props) {\n  const theme = useTheme2();\n  const styles = getConfigStyles(theme);\n  const { jsonData, secureJsonFields, secureJsonData } = options;\n\n  const onChange = (field: keyof FluvioDataSourceOptions) => (e: ChangeEvent<HTMLInputElement>) => {\n    onOptionsChange({\n      ...options,\n      jsonData: {\n        ...jsonData,\n        [field]: e.target.value,\n      },\n    });\n  };\n\n  const onRegionChange = (value: SelectableValue<string>) => {\n    onOptionsChange({\n      ...options,\n      jsonData: {\n        ...jsonData,\n        region: value.value || '',\n      },\n    });\n  };\n\n  const fillExampleValues = () => {\n    onOptionsChange({\n      ...options,\n      jsonData: {\n        ...jsonData,\n        region: 'ap-southeast-2',\n      },\n    });\n  };\n\n  const onSecretChange = (field: keyof FluvioSecureJsonData) => (e: ChangeEvent<HTMLInputElement>) => {\n    onOptionsChange({\n      ...options,\n      secureJsonData: {\n        ...secureJsonData,\n        [field]: e.target.value,\n      },\n    });\n  };\n\n  const onResetSecret = (field: keyof FluvioSecureJsonData) => () => {\n    onOptionsChange({\n      ...options,\n      secureJsonFields: {\n        ...secureJsonFields,\n        [field]: false,\n      },\n      secureJsonData: {\n        ...secureJsonData,\n        [field]: '',\n      },\n    });\n  };\n\n  const isConfigured = jsonData?.region && secureJsonFields?.accessKey && secureJsonFields?.secretKey;\n\n  return (\n    <div className={styles.container}>\n      {!isConfigured && (\n        <div className={styles.alertSection}>\n          <Alert severity=\"info\" title=\"Configuration Required\">\n            Configure your AWS region and permanent IAM credentials to connect to DynamoDB. Use long-term access keys for reliable access.\n            <div style={{ marginTop: '8px' }}>\n              <Button variant=\"secondary\" size=\"sm\" onClick={fillExampleValues}>\n                Use Example Region (ap-southeast-2)\n              </Button>\n            </div>\n          </Alert>\n        </div>\n      )}\n      \n      <div className={styles.configSection}>\n        <div className={styles.sectionHeader}>\n          🌍 AWS Configuration\n        </div>\n        \n        <div className={styles.formRow}>\n          <div className={styles.fieldContainer}>\n            <label className={styles.fieldLabel} title=\"Select the AWS region where your DynamoDB tables are located\">\n              AWS Region\n            </label>\n            <Select\n              placeholder=\"Select AWS region\"\n              value={AWS_REGIONS.find(r => r.value === jsonData?.region)}\n              options={AWS_REGIONS}\n              onChange={onRegionChange}\n            />\n          </div>\n        </div>\n        \n        <div className={styles.formRow}>\n          <div className={styles.fieldContainer}>\n            <label className={styles.fieldLabel} title=\"Optional: Custom DynamoDB endpoint URL for local development or VPC endpoints\">\n              Custom Endpoint\n            </label>\n            <Input\n              placeholder=\"https://dynamodb.ap-southeast-2.amazonaws.com (leave empty for default)\"\n              value={jsonData?.endpoint || ''}\n              onChange={onChange('endpoint')}\n            />\n          </div>\n        </div>\n      </div>\n\n      <div className={styles.configSection}>\n        <div className={styles.sectionHeader}>\n          🔐 AWS Credentials\n        </div>\n        \n        <div className={styles.credentialsInfo}>\n          Use permanent IAM user credentials (Access Key ID starting with AKIA*). \n          This plugin is optimized for long-term credentials that don't expire. \n          All credentials are stored securely and never visible in plain text.\n        </div>\n        \n        <div className={styles.formRow}>\n          <div className={styles.fieldContainer}>\n            <label className={styles.fieldLabel}>Access Key ID</label>\n            <SecretInput\n              isConfigured={secureJsonFields?.accessKey}\n              value={secureJsonData?.accessKey || ''}\n              placeholder=\"AKIA**************** (permanent access key)\"\n              onChange={onSecretChange('accessKey')}\n              onReset={onResetSecret('accessKey')}\n            />\n          </div>\n        </div>\n        \n        <div className={styles.formRow}>\n          <div className={styles.fieldContainer}>\n            <label className={styles.fieldLabel}>Secret Access Key</label>\n            <SecretInput\n              isConfigured={secureJsonFields?.secretKey}\n              value={secureJsonData?.secretKey || ''}\n              placeholder=\"Your AWS secret access key\"\n              onChange={onSecretChange('secretKey')}\n              onReset={onResetSecret('secretKey')}\n            />\n          </div>\n        </div>\n        \n        {/* Session token field removed - optimized for permanent credentials only */}\n\n      </div>\n\n      <div className={styles.permissionsInfo}>\n        💡 <strong>IAM Permissions Required:</strong><br/>\n        Your AWS user/role needs these DynamoDB permissions:<br/>\n        • <code>dynamodb:Query</code> - for key-based queries<br/>\n        • <code>dynamodb:Scan</code> - for table scans<br/>\n        • <code>dynamodb:ExecuteStatement</code> - for PartiQL queries<br/>\n        • <code>dynamodb:DescribeTable</code> - for table metadata<br/>\n        • <code>dynamodb:ListTables</code> - for connection testing\n      </div>\n    </div>\n  );\n}\n","import React, { ChangeEvent, useState } from 'react';\nimport { Input, RadioButtonGroup, Button, Select, Alert, useTheme2, InlineField, InlineSwitch, DateTimePicker, TextArea } from '@grafana/ui'; \nimport { QueryEditorProps, SelectableValue, GrafanaTheme2, DataQueryRequest, DataFrame, CoreApp, TimeRange, dateTime, Field, DateTime } from '@grafana/data';\nimport { css } from '@emotion/css';\nimport { DataSource } from '../datasource';\nimport { FluvioDataSourceOptions, DynamoQuery, FieldMapping } from '../types';\nimport { firstValueFrom } from 'rxjs';\n\ntype Props = QueryEditorProps<DataSource, DynamoQuery, FluvioDataSourceOptions>;\n\n// Responsive styling functions\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    max-width: 100% !important;\n    overflow: hidden !important;\n    width: 100% !important;\n    box-sizing: border-box !important;\n  `,\n  \n  responsiveGrid: css`\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n    gap: ${theme.spacing(2)};\n    width: 100%;\n    \n    @media (max-width: 768px) {\n      grid-template-columns: 1fr;\n    }\n  `,\n  \n  formRow: css`\n    display: flex !important;\n    flex-wrap: wrap !important;\n    gap: ${theme.spacing(2)} !important;\n    align-items: flex-start !important;\n    width: 100% !important;\n    margin-bottom: ${theme.spacing(2)} !important;\n    box-sizing: border-box !important;\n    \n    /* Force wrapping on smaller screens */\n    @media (max-width: 1200px) {\n      flex-direction: column !important;\n      align-items: stretch !important;\n      gap: ${theme.spacing(1)} !important;\n    }\n    \n    /* Additional breakpoint for tablet */\n    @media (max-width: 768px) {\n      flex-direction: column !important;\n      align-items: stretch !important;\n      gap: ${theme.spacing(1)} !important;\n    }\n  `,\n  \n  fieldContainer: css`\n    display: flex !important;\n    flex-direction: column !important;\n    flex: 1 !important;\n    min-width: 200px !important;\n    box-sizing: border-box !important;\n    \n    @media (max-width: 1200px) {\n      min-width: 100% !important;\n      margin-bottom: ${theme.spacing(1)} !important;\n      flex: none !important;\n    }\n    \n    @media (max-width: 768px) {\n      min-width: 100% !important;\n      margin-bottom: ${theme.spacing(1)} !important;\n      flex: none !important;\n    }\n  `,\n  \n  smallFieldContainer: css`\n    display: flex;\n    flex-direction: column;\n    min-width: 150px;\n    \n    @media (max-width: 1024px) {\n      min-width: 100%;\n      margin-bottom: ${theme.spacing(1)};\n    }\n  `,\n  \n  fieldLabel: css`\n    font-size: ${theme.typography.bodySmall.fontSize};\n    font-weight: ${theme.typography.fontWeightMedium};\n    color: ${theme.colors.text.primary};\n    margin-bottom: ${theme.spacing(0.5)};\n  `,\n  \n  keyValueRow: css`\n    display: flex;\n    flex-wrap: wrap;\n    gap: ${theme.spacing(1)};\n    align-items: flex-end;\n    width: 100%;\n    margin-bottom: ${theme.spacing(2)};\n    \n    @media (max-width: 768px) {\n      flex-direction: column;\n      align-items: stretch;\n    }\n  `,\n  \n  equalSign: css`\n    align-self: flex-end;\n    padding: 0 ${theme.spacing(1)};\n    margin-bottom: 8px;\n    font-weight: bold;\n    color: ${theme.colors.text.secondary};\n    \n    @media (max-width: 768px) {\n      align-self: center;\n      margin: ${theme.spacing(0.5)} 0;\n    }\n  `,\n  \n  \n  querySection: css`\n    background: ${theme.colors.background.secondary} !important;\n    border: 1px solid ${theme.colors.border.weak} !important;\n    border-radius: ${theme.shape.borderRadius()} !important;\n    padding: ${theme.spacing(2)} !important;\n    margin: ${theme.spacing(1)} 0 !important;\n    width: 100% !important;\n    box-sizing: border-box !important;\n    overflow: hidden !important;\n  `,\n  \n  /* Alternative layout for mobile - force vertical stacking */\n  mobileStack: css`\n    @media (max-width: 1200px) {\n      display: block !important;\n      width: 100% !important;\n      \n      & > * {\n        display: block !important;\n        width: 100% !important;\n        margin-bottom: ${theme.spacing(2)} !important;\n        box-sizing: border-box !important;\n        float: none !important;\n        clear: both !important;\n      }\n      \n      /* Force all nested elements to be full width */\n      & input,\n      & button,\n      & [role=\"combobox\"],\n      & [class*=\"input\"],\n      & [class*=\"select\"] {\n        width: 100% !important;\n        max-width: none !important;\n        min-width: auto !important;\n        box-sizing: border-box !important;\n      }\n    }\n    \n    /* Even more aggressive - force on smaller screens */\n    @media (max-width: 768px) {\n      display: block !important;\n      width: 100% !important;\n      \n      & > * {\n        display: block !important;\n        width: 100% !important;\n        margin-bottom: ${theme.spacing(1)} !important;\n        box-sizing: border-box !important;\n        float: none !important;\n        clear: both !important;\n      }\n    }\n  `,\n  \n  testQueryButton: css`\n    background: ${theme.colors.primary.main};\n    color: ${theme.colors.primary.contrastText};\n    border: none;\n    font-weight: 500;\n    \n    &:hover {\n      background: ${theme.colors.primary.shade};\n    }\n    \n    &:disabled {\n      background: ${theme.colors.action.disabledBackground};\n      color: ${theme.colors.action.disabledText};\n    }\n  `,\n  \n  buttonGroup: css`\n    display: flex;\n    gap: ${theme.spacing(1)};\n    align-items: center;\n    margin-top: ${theme.spacing(2)};\n    \n    @media (max-width: 768px) {\n      flex-direction: column;\n      align-items: stretch;\n      \n      & > button {\n        width: 100%;\n      }\n    }\n  `,\n  \n  successMessage: css`\n    background: ${theme.colors.success.transparent};\n    border: 1px solid ${theme.colors.success.border};\n    border-radius: ${theme.shape.borderRadius()};\n    padding: ${theme.spacing(1)};\n    color: ${theme.colors.success.text};\n    font-size: ${theme.typography.bodySmall.fontSize};\n    margin-top: ${theme.spacing(1)};\n  `,\n  \n  advancedSection: css`\n    background: ${theme.colors.background.secondary};\n    border: 1px solid ${theme.colors.border.weak};\n    border-radius: ${theme.shape.borderRadius()};\n    padding: ${theme.spacing(2)};\n    margin-top: ${theme.spacing(2)};\n  `,\n  \n  fieldMappingCard: css`\n    background: ${theme.colors.background.primary};\n    border: 1px solid ${theme.colors.border.medium};\n    border-radius: ${theme.shape.borderRadius()};\n    padding: ${theme.spacing(2)};\n    margin: ${theme.spacing(1)} 0;\n  `,\n  \n  infoText: css`\n    font-size: ${theme.typography.bodySmall.fontSize};\n    color: ${theme.colors.text.secondary};\n    margin-top: ${theme.spacing(1)};\n  `\n});\n\n// Helper function to analyze data structure on the frontend\nconst tryFallbackSchemaAnalysis = async (originalQuery: DynamoQuery, datasource: DataSource): Promise<FieldMapping[]> => {\n  console.log('Starting fallback schema analysis...');\n  \n  // Run a normal query to get raw data\n  const dataQuery: DynamoQuery = {\n    ...originalQuery,\n    discoverSchema: false,\n    outputFormat: 'auto',\n    limit: originalQuery.limit || 100 // Use user's specified limit or default to 100\n  };\n  \n  const timeRange: TimeRange = {\n    from: dateTime().subtract(1, 'hour'),\n    to: dateTime(),\n    raw: { from: 'now-1h', to: 'now' }\n  };\n  \n  const queryRequest: DataQueryRequest<DynamoQuery> = {\n    targets: [dataQuery],\n    range: timeRange,\n    interval: '1s',\n    intervalMs: 1000,\n    maxDataPoints: 500,\n    scopedVars: {},\n    timezone: 'UTC',\n    app: CoreApp.Explore,\n    requestId: 'fallback_analysis',\n    startTime: Date.now()\n  };\n  \n  const response = await firstValueFrom(datasource.query(queryRequest));\n  console.log('Fallback query response:', response);\n  \n  const discoveredFields: FieldMapping[] = [];\n  \n  if (response.data && response.data.length > 0) {\n    const dataFrame = response.data[0] as DataFrame;\n    \n    // Look for raw_json field\n    const rawJsonField = dataFrame.fields.find((f: Field) => f.name === 'raw_json');\n    \n    if (rawJsonField && rawJsonField.values && rawJsonField.values.length > 0) {\n      console.log('Found raw_json field, analyzing structure...');\n      \n      // Parse the first few raw JSON records\n      const sampleSize = Math.min(3, rawJsonField.values.length);\n      const allFieldPaths = new Set<string>();\n      \n      for (let i = 0; i < sampleSize; i++) {\n        const rawJson = rawJsonField.values.get(i) as string;\n        try {\n          const parsedData = JSON.parse(rawJson);\n          const paths = extractFieldPaths(parsedData, '');\n          paths.forEach(path => allFieldPaths.add(path.path));\n        } catch (error) {\n          console.error('Failed to parse raw JSON:', error);\n        }\n      }\n      \n      // Create field mappings from discovered paths (limit to avoid UI overload)\n      const sortedPaths = Array.from(allFieldPaths).sort();\n      const maxFields = 40; // Limit to 40 fields to avoid UI overload\n      \n      sortedPaths.slice(0, maxFields).forEach(path => {\n        // Create a clean field name\n        const cleanFieldName = path.replace(/\\[.*?\\]/g, '').replace(/\\./g, '_');\n        \n        // Determine data type by sampling the field\n        let dataType: 'string' | 'number' | 'boolean' | 'time' | 'json' = 'string';\n        try {\n          const firstRecord = JSON.parse(rawJsonField.values.get(0) as string);\n          const sampleValue = getValueByPath(firstRecord, path);\n          dataType = determineDataType(sampleValue);\n        } catch {\n          dataType = 'string'; // Default fallback\n        }\n        \n        discoveredFields.push({\n          fieldName: cleanFieldName || path.split('.').pop() || 'field',\n          sourcePath: path,\n          dataType: dataType\n        });\n      });\n      \n      if (sortedPaths.length > maxFields) {\n        console.log(`Limited field discovery to ${maxFields} out of ${sortedPaths.length} total fields`);\n      }\n      \n      console.log(`Fallback analysis discovered ${discoveredFields.length} fields:`, discoveredFields);\n    }\n  }\n  \n  return discoveredFields;\n};\n\n// Helper function to extract all field paths from an object\nconst extractFieldPaths = (obj: any, prefix: string): Array<{path: string, type: string}> => {\n  const paths: Array<{path: string, type: string}> = [];\n  \n  const traverse = (current: any, currentPath: string) => {\n    if (current === null || current === undefined) {\n      return;\n    }\n    \n    if (typeof current === 'object' && !Array.isArray(current)) {\n      // Object - traverse properties\n      Object.keys(current).forEach(key => {\n        const newPath = currentPath ? `${currentPath}.${key}` : key;\n        \n        // Add this path\n        paths.push({\n          path: newPath,\n          type: determineDataType(current[key])\n        });\n        \n        // Recursively traverse if it's a nested object\n        if (typeof current[key] === 'object' && current[key] !== null && !Array.isArray(current[key])) {\n          traverse(current[key], newPath);\n        }\n      });\n    } else if (Array.isArray(current) && current.length > 0) {\n      // Array - analyze first element\n      const arrayPath = `${currentPath}[0]`;\n      traverse(current[0], arrayPath);\n    }\n  };\n  \n  traverse(obj, prefix);\n  return paths;\n};\n\n// Helper to get value by path\nconst getValueByPath = (obj: any, path: string): any => {\n  const keys = path.split('.');\n  let current = obj;\n  \n  for (const key of keys) {\n    if (key.includes('[')) {\n      const [arrayKey, indexStr] = key.split('[');\n      const index = parseInt(indexStr.replace(']', ''), 10);\n      current = current?.[arrayKey]?.[index];\n    } else {\n      current = current?.[key];\n    }\n    \n    if (current === undefined || current === null) {\n      return undefined;\n    }\n  }\n  \n  return current;\n};\n\n// Helper to determine data type\nconst determineDataType = (value: any): 'string' | 'number' | 'boolean' | 'time' | 'json' => {\n  if (value === null || value === undefined) {\n    return 'string';\n  }\n\n  if (typeof value === 'boolean') {\n    return 'boolean';\n  }\n  if (typeof value === 'number') {\n    return 'number';\n  }\n  \n  if (typeof value === 'string') {\n    // Check if it looks like a timestamp\n    if (/^\\d{10}$/.test(value) || /^\\d{13}$/.test(value)) {\n      return 'time';\n    }\n    // Check for ISO date strings\n    if (/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/.test(value)) {\n      return 'time';\n    }\n    return 'string';\n  }\n  \n  if (typeof value === 'object' && value !== null) return 'json';\n  \n  return 'string';\n};\n\nexport function QueryEditor({ query, onChange, onRunQuery, datasource }: Props) {\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n  const [showAdvanced, setShowAdvanced] = useState(false);\n  const [isDiscovering, setIsDiscovering] = useState(false);\n  const [isTestingQuery, setIsTestingQuery] = useState(false);\n  const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n  const [showTemplateVariableHelp, setShowTemplateVariableHelp] = useState(false);\n\n  // Get available template variables for UI hints\n  const availableVariables = React.useMemo(() => {\n    try {\n      return datasource.getVariables ? datasource.getVariables() : [];\n    } catch {\n      return [];\n    }\n  }, [datasource]);\n\n  const queryMode = query.queryMode ?? (query.partiql !== undefined ? 'partiql' : 'key');\n\n  React.useEffect(() => {\n    if (!query.queryMode) {\n      onChange({ ...query, queryMode });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [query.queryMode, queryMode]);\n\n  // Validate template variables and PartiQL syntax\n  const validateTemplateVariables = (queryText: string): { isValid: boolean; warnings: string[] } => {\n    const warnings: string[] = [];\n\n    if (!queryText) {\n      return { isValid: true, warnings: [] };\n    }\n\n    // Validate PartiQL syntax using datasource method\n    if (queryMode === 'partiql') {\n      const partiqlValidation = (datasource as any).validatePartiQLQuery ? (datasource as any).validatePartiQLQuery(queryText) : { isValid: true };\n      if (!partiqlValidation.isValid) {\n        warnings.push(`❌ PartiQL Syntax Error: ${partiqlValidation.error}`);\n      }\n    }\n\n    // Check if $__timeFilter is used without enabling time filtering\n    if (queryText.includes('$__timeFilter') && !query.timeFilterEnabled) {\n      warnings.push('⚠️ $__timeFilter requires \"Enable Time Filtering\" to be turned ON. Please enable it below.');\n    }\n\n    // Find all variable references in the query\n    const variableMatches = queryText.match(/\\$[\\w_]+|\\$\\{[\\w_]+\\}/g) || [];\n    const referencedVariables = variableMatches.map(match =>\n      match.startsWith('${') ? match.slice(2, -1) : match.slice(1)\n    );\n\n    // Check for undefined variables (excluding built-in Grafana variables)\n    const builtInVariables = ['__from', '__to', '__timeFilter', '__interval', '__interval_ms', '__rate_interval', '__range'];\n    const availableVarNames = availableVariables.map(v => v.replace('$', ''));\n\n    for (const varName of referencedVariables) {\n      if (!builtInVariables.includes(varName) && !availableVarNames.includes(varName)) {\n        warnings.push(`Variable '$${varName}' is not defined in dashboard variables`);\n      }\n    }\n\n    return { isValid: warnings.length === 0, warnings };\n  };\n\n  const onFieldChange = <T extends keyof DynamoQuery>(field: T) => (e: ChangeEvent<HTMLInputElement>) => {\n    onChange({ ...query, [field]: e.target.value });\n  };\n\n  const onLimitChange = (e: ChangeEvent<HTMLInputElement>) => {\n    onChange({ ...query, limit: parseInt(e.target.value, 10) || 100 });\n  };\n\n  const onOutputFormatChange = (value: SelectableValue<string>) => {\n    const outputFormat = value.value as 'auto' | 'table' | 'geomap' | 'timeseries' | undefined;\n    onChange({ ...query, outputFormat: outputFormat || 'auto' });\n  };\n\n  const onPartitionModeChange = (mode: 'single' | 'in') => {\n    if (mode === 'in') {\n      const seedValues =\n        (partitionKeyValues && partitionKeyValues.length > 0\n          ? partitionKeyValues\n          : partitionKeyValue\n          ? [partitionKeyValue]\n          : []) ?? [];\n      onChange({\n        ...query,\n        partitionKeyMode: mode,\n        partitionKeyValues: seedValues,\n      });\n    } else {\n      onChange({\n        ...query,\n        partitionKeyMode: mode,\n        partitionKeyValue: partitionKeyValue ?? partitionKeyValues?.[0] ?? '',\n      });\n    }\n  };\n\n  const onPartitionValuesChange = (event: ChangeEvent<HTMLTextAreaElement>) => {\n    const raw = event.target.value ?? '';\n    const values = raw\n      .split(/[\\n,]/)\n      .map((value) => value.trim())\n      .filter((value) => value.length > 0);\n    onChange({\n      ...query,\n      partitionKeyValues: values,\n    });\n  };\n\n  const onSortOperatorChange = (selection: SelectableValue<string>) => {\n    const nextOperator = (selection.value as DynamoQuery['sortKeyOperator']) ?? 'eq';\n    const updated: DynamoQuery = {\n      ...query,\n      sortKeyOperator: nextOperator,\n    };\n\n    if (nextOperator === 'between') {\n      updated.sortKeyRangeStart = sortKeyRangeStart ?? sortKeyValue ?? '';\n      updated.sortKeyRangeEnd = sortKeyRangeEnd ?? '';\n      updated.sortKeyValues = undefined;\n    } else if (nextOperator === 'in') {\n      // Initialize sortKeyValues for IN operator\n      const seedValues = query.sortKeyValues && query.sortKeyValues.length > 0\n        ? query.sortKeyValues\n        : query.sortKeyValue\n        ? [query.sortKeyValue]\n        : [];\n      updated.sortKeyValues = seedValues;\n      updated.sortKeyRangeStart = undefined;\n      updated.sortKeyRangeEnd = undefined;\n    } else {\n      updated.sortKeyRangeStart = undefined;\n      updated.sortKeyRangeEnd = undefined;\n      updated.sortKeyValues = undefined;\n    }\n\n    onChange(updated);\n  };\n\n  const onSortKeyValuesChange = (event: ChangeEvent<HTMLTextAreaElement>) => {\n    const raw = event.target.value ?? '';\n    const values = raw\n      .split(/[\\n,]/)\n      .map((value) => value.trim())\n      .filter((value) => value.length > 0);\n    onChange({\n      ...query,\n      sortKeyValues: values,\n    });\n  };\n\n  const onSortDirectionChange = (value: 'asc' | 'desc') => {\n    onChange({\n      ...query,\n      sortDirection: value,\n    });\n  };\n\n  const discoverSchema = async () => {\n    if (!query.table) {\n      alert('Please enter a table name first');\n      return;\n    }\n    \n    setIsDiscovering(true);\n    try {\n      console.log('Discovering schema for table:', query.table, 'with limit:', query.limit || 100);\n      \n      // Use backend's schema discovery to analyze table structure\n      const discoveryQuery: DynamoQuery = { \n        ...query, \n        discoverSchema: true, // Backend returns schema information\n        fieldMappings: undefined, // Clear existing mappings\n        outputFormat: 'auto' as const, // Auto-detect best format\n        limit: query.limit || 100 // Use user's specified limit or default to 100\n      };\n      \n      console.log('Executing schema discovery for any table type...');\n      onChange(discoveryQuery);\n      onRunQuery();\n      \n      // The backend will analyze the actual data structure dynamically\n      alert('🔍 Discovering schema... The system is analyzing your table structure to understand the data format.');\n      \n    } catch (error) {\n      console.error('Schema discovery failed:', error);\n      alert('Schema discovery failed. Please check your table name and connection settings.');\n    } finally {\n      setTimeout(() => setIsDiscovering(false), 500);\n    }\n  };\n  \n  const generateFieldMappingsFromData = async () => {\n    const hasPartiql = Boolean(query.partiql && query.partiql.trim().length > 0);\n    const hasTable = Boolean(query.table && query.table.trim().length > 0);\n\n    if (!hasPartiql && !hasTable) {\n      alert('Please provide either a PartiQL statement or a table name before discovering the schema.');\n      return;\n    }\n\n    setIsDiscovering(true);\n    try {\n      console.log(\n        'Starting dynamic schema discovery using',\n        hasPartiql ? 'PartiQL statement' : `table: ${query.table}`,\n        'with limit:',\n        query.limit || 100\n      );\n\n      // Step 1: Execute schema discovery query directly to get response\n      const schemaQuery: DynamoQuery = { \n        ...query, \n        discoverSchema: true, // Backend will return schema information\n        limit: query.limit || 100, // Use user's specified limit or default to 100\n        fieldMappings: undefined, // Clear existing mappings\n        refId: 'schema_discovery'\n      };\n      \n      console.log('Executing schema discovery query:', schemaQuery);\n      \n      // Store original query \n      const originalQuery = { ...query };\n      \n      // Execute the schema discovery query directly to get the response\n      const timeRange: TimeRange = {\n        from: dateTime().subtract(1, 'hour'),\n        to: dateTime(),\n        raw: { from: 'now-1h', to: 'now' }\n      };\n      \n      const queryRequest: DataQueryRequest<DynamoQuery> = {\n        targets: [schemaQuery],\n        range: timeRange,\n        interval: '1s',\n        intervalMs: 1000,\n        maxDataPoints: 500,\n        scopedVars: {},\n        timezone: 'UTC',\n        app: CoreApp.Explore,\n        requestId: 'schema_discovery',\n        startTime: Date.now()\n      };\n      \n      const queryObservable = datasource.query(queryRequest);\n      const response = await firstValueFrom(queryObservable);\n      \n      console.log('Schema discovery response:', response);\n      console.log('Response data length:', response.data?.length || 0);\n      if (response.data?.length > 0) {\n        console.log('First frame:', response.data[0]);\n        console.log('First frame fields:', response.data[0].fields);\n      }\n      \n      if (response.data && response.data.length > 0) {\n        const schemaFrame = response.data[0] as DataFrame;\n        console.log('Schema frame name:', schemaFrame.name);\n        console.log('Schema frame fields count:', schemaFrame.fields?.length || 0);\n        \n        const discoveredMappings: FieldMapping[] = [];\n        \n        // Parse schema frame to extract field information\n        // The backend returns: field_path, data_type, sample_value, frequency\n        if (schemaFrame.fields && schemaFrame.fields.length > 0) {\n          const fieldPathField = schemaFrame.fields.find((f: Field) => f.name === 'field_path');\n          const dataTypeField = schemaFrame.fields.find((f: Field) => f.name === 'data_type');\n          const sampleValueField = schemaFrame.fields.find((f: Field) => f.name === 'sample_value');\n          \n          console.log('Found fields:', {\n            fieldPath: !!fieldPathField,\n            dataType: !!dataTypeField,\n            sampleValue: !!sampleValueField\n          });\n          \n          if (fieldPathField && dataTypeField && fieldPathField.values) {\n            console.log('Processing discovered fields...');\n            \n            // Extract discovered fields from the response\n            for (let i = 0; i < fieldPathField.values.length; i++) {\n              const fieldPath = fieldPathField.values.get(i) as string;\n              const dataType = dataTypeField.values.get(i) as string;\n              const sampleValue = sampleValueField?.values.get(i) as string;\n              \n              if (fieldPath && dataType) {\n                // Create a clean field name from the path\n                const cleanFieldName = fieldPath.replace(/\\[.*?\\]/g, '').replace(/\\./g, '_');\n                \n                discoveredMappings.push({\n                  fieldName: cleanFieldName || fieldPath,\n                  sourcePath: fieldPath,\n                  dataType: dataType as 'string' | 'number' | 'boolean' | 'time' | 'json'\n                });\n                \n                console.log(`Discovered field: ${fieldPath} -> ${dataType} (sample: ${sampleValue})`);\n              }\n            }\n          }\n        }\n        \n        if (discoveredMappings.length > 0) {\n          // Update query with discovered field mappings\n          const updatedQuery = { \n            ...originalQuery, \n            fieldMappings: discoveredMappings,\n            outputFormat: 'table' as const, // Switch to table view to see the mapped fields\n            discoverSchema: false // Turn off schema discovery\n          };\n          \n          onChange(updatedQuery);\n          setShowAdvanced(true); // Show the advanced section so user can see the mappings\n          alert(`✅ Successfully discovered ${discoveredMappings.length} fields from ${query.limit || 100} records! Check the Advanced Field Mapping section below to customize as needed.`);\n          \n          console.log('Schema discovery completed successfully:', discoveredMappings);\n        } else {\n          console.log('No fields discovered from schema frame - trying fallback analysis');\n          // Fallback: Try to analyze the data on the frontend side\n          try {\n            const fallbackMappings = await tryFallbackSchemaAnalysis(originalQuery, datasource);\n            if (fallbackMappings.length > 0) {\n              const updatedQuery = { \n                ...originalQuery, \n                fieldMappings: fallbackMappings,\n                outputFormat: 'table' as const,\n                discoverSchema: false\n              };\n              \n              onChange(updatedQuery);\n              setShowAdvanced(true);\n              alert(`✅ Used fallback analysis and discovered ${fallbackMappings.length} fields! The backend schema discovery had issues, but we successfully analyzed your raw data directly. Check the Advanced Field Mapping section below.`);\n              return; // Success with fallback\n            }\n          } catch (fallbackError) {\n            console.error('Fallback analysis also failed:', fallbackError);\n          }\n          \n          alert('⚠️ No fields could be discovered from the schema response. The data structure might be too complex or there was an issue with field analysis. Try running a normal query first to verify your table access.');\n        }\n      } else {\n        console.log('Schema discovery response had no data frames');\n        if (response.error) {\n          console.error('Response error:', response.error);\n          alert(`❌ Schema discovery failed with error: ${response.error.message || 'Unknown error'}`);\n        } else {\n          alert('⚠️ Schema discovery returned no data frames. This could indicate:\\n• Table name is incorrect\\n• Table has no data\\n• Connection/permission issues\\n• Backend processing error\\n\\nTry running a normal query first to verify your table works.');\n        }\n      }\n      \n    } catch (error) {\n      console.error('Schema discovery failed:', error);\n      alert('❌ Schema discovery failed. Please check your table name, connection settings, and ensure the table contains data.');\n    } finally {\n      setIsDiscovering(false);\n    }\n  };\n\n  const testQuery = async () => {\n    // Validate query before testing\n    if (queryMode === 'partiql') {\n      if (!query.partiql || !query.partiql.trim()) {\n        alert('Please enter a PartiQL query first');\n        return;\n      }\n    } else {\n      if (!query.table) {\n        alert('Please enter a table name first');\n        return;\n      }\n    }\n    \n    setIsTestingQuery(true);\n    try {\n      // Run the query with user's limit (or reasonable default for testing)\n      const testQueryData = { \n        ...query, \n        limit: Math.min(query.limit || 1, 1000000), // Allow up to 100 records for testing, default 25\n        discoverSchema: false \n      };\n      onChange(testQueryData);\n      setTimeout(onRunQuery, 100);\n    } catch (error) {\n      console.error('Test query failed:', error);\n    } finally {\n      // Reset test state after a short delay\n      setTimeout(() => setIsTestingQuery(false), 2000);\n    }\n  };\n\n  const addFieldMapping = () => {\n    const newMapping: FieldMapping = {\n      fieldName: '',\n      sourcePath: '',\n      dataType: 'string'\n    };\n    const updatedMappings = [...(query.fieldMappings || []), newMapping];\n    onChange({ ...query, fieldMappings: updatedMappings });\n  };\n\n  const removeFieldMapping = (index: number) => {\n    const updatedMappings = (query.fieldMappings || []).filter((_, i) => i !== index);\n    onChange({ ...query, fieldMappings: updatedMappings });\n  };\n\n  const updateFieldMapping = (index: number, field: keyof FieldMapping, value: string) => {\n    const updatedMappings = [...(query.fieldMappings || [])];\n    updatedMappings[index] = { ...updatedMappings[index], [field]: value };\n    onChange({ ...query, fieldMappings: updatedMappings });\n  };\n\n  const applyFieldMappings = async () => {\n    // Validate field mappings\n    const invalidMappings = (query.fieldMappings || []).filter(\n      mapping => !mapping.fieldName.trim() || !mapping.sourcePath.trim()\n    );\n    \n    if (invalidMappings.length > 0) {\n      alert('Please fill in all field names and source paths before applying mappings.');\n      return;\n    }\n    \n    // Apply the mappings by running a test query\n    try {\n      setIsTestingQuery(true);\n      const testQueryData = { \n        ...query, \n        limit: Math.min(query.limit || 25, 100), // Reasonable limit for testing\n        discoverSchema: false \n      };\n      onChange(testQueryData);\n      setTimeout(() => {\n        onRunQuery();\n        // Show success message\n        setShowSuccessMessage(true);\n        setTimeout(() => {\n          setShowSuccessMessage(false);\n        }, 3000);\n      }, 100);\n    } catch (error) {\n      console.error('Failed to apply field mappings:', error);\n      alert('Failed to apply field mappings. Please check your configuration.');\n    } finally {\n      setTimeout(() => setIsTestingQuery(false), 2000);\n    }\n  };\n\n  const {\n    partiql,\n    table,\n    partitionKeyName,\n    partitionKeyValue,\n    partitionKeyMode,\n    partitionKeyValues,\n    sortKeyName,\n    sortKeyValue,\n    sortKeyOperator,\n    sortKeyRangeStart,\n    sortKeyRangeEnd,\n    sortKeyValues,\n    sortDirection,\n    limit,\n    outputFormat,\n    fieldMappings,\n  } = query;\n\n  const resolvedPartitionMode = partitionKeyMode ?? 'single';\n  const resolvedSortOperator = sortKeyOperator ?? 'eq';\n  const resolvedSortDirection = sortDirection ?? 'asc';\n\n  const outputFormatOptions = [\n    { label: 'Auto-detect', value: 'auto' },\n    { label: 'Table View', value: 'table' },\n    { label: 'Geomap', value: 'geomap' },\n    { label: 'Time Series', value: 'timeseries' }\n  ];\n\n  const partitionModeOptions: Array<SelectableValue<'single' | 'in'>> = [\n    { label: 'Single value', value: 'single' },\n    { label: 'Multiple values (IN)', value: 'in' },\n  ];\n\n  const sortOperatorOptions: Array<SelectableValue<string>> = [\n    { label: 'Equals (=)', value: 'eq' },\n    { label: 'IN (multiple values)', value: 'in' },\n    { label: 'Begins with', value: 'begins_with' },\n    { label: 'Between', value: 'between' },\n    { label: '>=', value: 'gte' },\n    { label: '>', value: 'gt' },\n    { label: '<=', value: 'lte' },\n    { label: '<', value: 'lt' },\n  ];\n\n  const sortDirectionOptions: Array<SelectableValue<'asc' | 'desc'>> = [\n    { label: 'Ascending', value: 'asc' },\n    { label: 'Descending', value: 'desc' },\n  ];\n\n  const dataTypeOptions = [\n    { label: 'String', value: 'string' },\n    { label: 'Number', value: 'number' },\n    { label: 'Boolean', value: 'boolean' },\n    { label: 'Time', value: 'time' },\n    { label: 'JSON', value: 'json' }\n  ];\n\n  return (\n    <div className={styles.container}>\n      {/* Query Type Selection */}\n      <div className={styles.querySection}>\n        <RadioButtonGroup\n          options={[\n            { label: 'PartiQL Query', value: 'partiql' },\n            { label: 'Key Query', value: 'key' },\n          ]}\n          value={queryMode}\n          onChange={(value) => {\n            if (value === 'partiql') {\n              onChange({\n                ...query,\n                queryMode: 'partiql',\n                partiql: query.partiql ?? 'SELECT * FROM \"YourTableName\"',\n              });\n            } else {\n              onChange({\n                ...query,\n                queryMode: 'key',\n                partiql: undefined,\n              });\n            }\n          }}\n        />\n      </div>\n\n      {/* Query Configuration */}\n      <div className={styles.querySection}>\n        {queryMode === 'partiql' ? (\n          <div>\n            <div className={styles.fieldContainer}>\n              <label className={styles.fieldLabel}>PartiQL Query</label>\n              <Input\n                placeholder='SELECT * FROM \"YourTableName\"'\n                value={partiql ?? ''}\n                onChange={onFieldChange('partiql')}\n                onBlur={onRunQuery}\n              />\n              \n              {/* Template Variable Validation Warnings */}\n              {(() => {\n                const validation = validateTemplateVariables(partiql || '');\n                if (validation.warnings.length > 0) {\n                  return (\n                    <div style={{ marginTop: theme.spacing(1) }}>\n                      {validation.warnings.map((warning, index) => (\n                        <Alert key={index} severity=\"warning\" title=\"Template Variable Warning\">\n                          {warning}\n                        </Alert>\n                      ))}\n                    </div>\n                  );\n                }\n                return null;\n              })()}\n            </div>\n            \n            {/* Template Variables Help Section */}\n            <div style={{ marginTop: theme.spacing(1) }}>\n              <Button\n                variant=\"secondary\"\n                size=\"sm\"\n                icon={showTemplateVariableHelp ? \"angle-down\" : \"angle-right\"}\n                fill=\"text\"\n                onClick={() => setShowTemplateVariableHelp(!showTemplateVariableHelp)}\n              >\n                Template Variables ({availableVariables.length} available)\n              </Button>\n            </div>\n\n            {showTemplateVariableHelp && (\n              <div className={styles.advancedSection}>\n                <h4 style={{ margin: 0, marginBottom: theme.spacing(1) }}>Template Variable Usage</h4>\n                \n                {availableVariables.length > 0 && (\n                  <div style={{ marginBottom: theme.spacing(2) }}>\n                    <label className={styles.fieldLabel}>Available Variables:</label>\n                    <div style={{ \n                      display: 'flex', \n                      flexWrap: 'wrap', \n                      gap: theme.spacing(0.5),\n                      marginTop: theme.spacing(0.5)\n                    }}>\n                      {availableVariables.map((variable) => (\n                        <code \n                          key={variable}\n                          style={{ \n                            background: theme.colors.background.secondary,\n                            padding: '2px 6px',\n                            borderRadius: theme.shape.borderRadius(),\n                            fontSize: theme.typography.bodySmall.fontSize,\n                            border: `1px solid ${theme.colors.border.weak}`\n                          }}\n                        >\n                          {variable}\n                        </code>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                <div className={styles.infoText}>\n                  <strong>PartiQL Template Variable Examples:</strong>\n                  <br/>• <code>SELECT * FROM &quot;$table_name&quot; WHERE status = &quot;$status&quot;</code>\n                  <br/>• <code>SELECT * FROM &quot;users&quot; WHERE region IN ($regions)</code>\n                  <br/>• <code>SELECT * FROM &quot;logs&quot; WHERE $__timeFilter</code>\n                  <br/>• <code>SELECT * FROM &quot;events&quot; WHERE userId = &quot;{'${user_id}'}&quot; AND $__timeFilter</code>\n                  <br/>• <code>SELECT * FROM &quot;logs&quot; WHERE timestamp BETWEEN $__from AND $__to</code>\n                  <br/><br/>\n                  <strong>Variable Syntax:</strong>\n                  <br/>• <code>$variable</code> - Simple variable substitution\n                  <br/>• <code>{'${variable}'}</code> - Variable in middle of expression\n                  <br/>• <code>$__timeFilter</code> - Automatic time range filtering (when enabled)\n                  <br/>• <code>$__from</code>, <code>$__to</code> - Built-in time range variables\n                  <br/>• Multi-value variables automatically format as comma-separated quoted values\n                  <br/><br/>\n                  <strong>⚠️ Important:</strong> Don&apos;t use <code>LIMIT</code> in PartiQL queries. Use the &quot;Limit&quot; field below instead.\n                </div>\n              </div>\n            )}\n            \n            {/* Limit field for PartiQL queries */}\n            <div className={`${styles.formRow} ${styles.mobileStack}`} style={{ marginTop: theme.spacing(2) }}>\n              <div className={styles.smallFieldContainer}>\n                <label className={styles.fieldLabel}>Limit</label>\n                <Input \n                  type=\"number\" \n                  placeholder=\"100\" \n                  value={limit || 100} \n                  onChange={onLimitChange} \n                />\n              </div>\n              \n              <div className={styles.fieldContainer}>\n                <label className={styles.fieldLabel}>Output Format</label>\n                <Select\n                  value={outputFormatOptions.find(opt => opt.value === outputFormat)}\n                  options={outputFormatOptions}\n                  onChange={onOutputFormatChange}\n                />\n              </div>\n            </div>\n\n            {/* Time Filtering Section for PartiQL */}\n            <div className={`${styles.formRow} ${styles.mobileStack}`} style={{ marginTop: theme.spacing(2) }}>\n              <InlineField label=\"Enable Time Filtering\" labelWidth={20}>\n                <InlineSwitch\n                  value={query.timeFilterEnabled || false}\n                  onChange={(event) => {\n                    const enabled = event.currentTarget.checked;\n                    onChange({ \n                      ...query, \n                      timeFilterEnabled: enabled,\n                      // Set default timestamp field when enabling, clear when disabling\n                      timestampField: enabled ? (query.timestampField || 'timestamp') : undefined,\n                      // Clear time values if disabling\n                      timeFrom: enabled ? query.timeFrom : undefined,\n                      timeTo: enabled ? query.timeTo : undefined\n                    });\n                  }}\n                />\n              </InlineField>\n            </div>\n            \n            {query.timeFilterEnabled && (\n              <div className={`${styles.formRow} ${styles.mobileStack}`}>\n                <div className={styles.fieldContainer}>\n                  <label className={styles.fieldLabel}>Timestamp Field Name</label>\n                  <Input \n                    placeholder=\"timestamp\" \n                    value={query.timestampField || 'timestamp'} \n                    onChange={(e: ChangeEvent<HTMLInputElement>) => {\n                      onChange({ ...query, timestampField: e.target.value });\n                    }}\n                  />\n                </div>\n              </div>\n            )}\n            \n            <div className={styles.buttonGroup}>\n              <Button \n                className={styles.testQueryButton}\n                variant=\"primary\" \n                size=\"sm\" \n                icon=\"play\"\n                disabled={isTestingQuery}\n                onClick={testQuery}\n              >\n                {isTestingQuery ? 'Testing...' : 'Test Query'}\n              </Button>\n              \n              <Button \n                variant=\"secondary\" \n                size=\"sm\" \n                icon=\"search\"\n                onClick={generateFieldMappingsFromData}\n                disabled={isDiscovering}\n              >\n                {isDiscovering ? 'Discovering Fields...' : 'Discover Schema'}\n              </Button>\n            </div>\n          </div>\n        ) : (\n          <div>\n            {/* Table Name Row */}\n            <div className={`${styles.formRow} ${styles.mobileStack}`}>\n              <div className={styles.fieldContainer}>\n                <label className={styles.fieldLabel}>Table Name</label>\n                <Input \n                  placeholder=\"YourTableName or $table_name\" \n                  value={table || ''} \n                  onChange={onFieldChange('table')} \n                />\n                {availableVariables.length > 0 && (\n                  <div className={styles.infoText} style={{ marginTop: theme.spacing(0.5) }}>\n                    💡 Use template variables: {availableVariables.slice(0, 3).join(', ')}\n                    {availableVariables.length > 3 && ` and ${availableVariables.length - 3} more`}\n                  </div>\n                )}\n              </div>\n              \n              <div style={{ alignSelf: 'flex-end' }}>\n                <Button \n                  variant=\"secondary\" \n                  size=\"sm\" \n                  icon=\"search\"\n                  disabled={isDiscovering}\n                  onClick={discoverSchema}\n                >\n                  {isDiscovering ? 'Discovering...' : 'Discover Schema'}\n                </Button>\n              </div>\n            </div>\n            \n            {/* Partition Key Row */}\n            <div className={`${styles.keyValueRow} ${styles.mobileStack}`}>\n              <div className={styles.smallFieldContainer}>\n                <label className={styles.fieldLabel}>Partition Key</label>\n                <Input \n                  placeholder=\"id\" \n                  value={partitionKeyName || ''} \n                  onChange={onFieldChange('partitionKeyName')} \n                />\n              </div>\n              <span className={styles.equalSign}>=</span>\n              <div className={styles.fieldContainer}>\n                <label className={styles.fieldLabel}>Partition Key Value</label>\n                <Input \n                  placeholder=\"0009 or $user_id (or empty for all)\" \n                  value={partitionKeyValue || ''} \n                  onChange={onFieldChange('partitionKeyValue')} \n                  disabled={resolvedPartitionMode === 'in'}\n                />\n              </div>\n            </div>\n            \n            <div className={`${styles.formRow} ${styles.mobileStack}`}>\n              <InlineField label=\"Partition Key Mode\" labelWidth={20}>\n                <RadioButtonGroup\n                  value={resolvedPartitionMode}\n                  onChange={(value) => onPartitionModeChange(value as 'single' | 'in')}\n                  options={partitionModeOptions}\n                />\n              </InlineField>\n            </div>\n\n            {resolvedPartitionMode === 'in' && (\n              <div className={styles.fieldContainer}>\n                <label className={styles.fieldLabel}>Partition Key Values (IN)</label>\n                <TextArea\n                  rows={3}\n                  placeholder=\"value1&#10;value2&#10;${variable}\"\n                  value={(partitionKeyValues && partitionKeyValues.length > 0 ? partitionKeyValues : partitionKeyValue ? [partitionKeyValue] : [])\n                    .join('\\n')}\n                  onChange={onPartitionValuesChange}\n                />\n                <div className={styles.infoText}>\n                  Provide one value per line. Template variables are supported and will be expanded before querying DynamoDB.\n                </div>\n              </div>\n            )}\n            \n            {/* Sort Key Row */}\n            <div className={`${styles.keyValueRow} ${styles.mobileStack}`}>\n              <div className={styles.smallFieldContainer}>\n                <label className={styles.fieldLabel}>Sort Key</label>\n                <Input \n                  placeholder=\"Timestamp (optional)\" \n                  value={sortKeyName || ''} \n                  onChange={onFieldChange('sortKeyName')} \n                />\n              </div>\n              <div className={styles.smallFieldContainer}>\n                <label className={styles.fieldLabel}>Operator</label>\n                <Select\n                  options={sortOperatorOptions}\n                  value={sortOperatorOptions.find((opt) => opt.value === resolvedSortOperator) ?? sortOperatorOptions[0]}\n                  onChange={onSortOperatorChange}\n                  placeholder=\"Select operator\"\n                  menuShouldPortal\n                />\n              </div>\n              {resolvedSortOperator === 'between' ? (\n                <>\n                  <div className={styles.fieldContainer}>\n                    <label className={styles.fieldLabel}>Range start</label>\n                    <Input\n                      placeholder=\"From value\"\n                      value={sortKeyRangeStart ?? ''}\n                      onChange={onFieldChange('sortKeyRangeStart')}\n                    />\n                  </div>\n                  <div className={styles.fieldContainer}>\n                    <label className={styles.fieldLabel}>Range end</label>\n                    <Input\n                      placeholder=\"To value\"\n                      value={sortKeyRangeEnd ?? ''}\n                      onChange={onFieldChange('sortKeyRangeEnd')}\n                    />\n                  </div>\n                </>\n              ) : resolvedSortOperator === 'in' ? (\n                <div className={styles.fieldContainer}>\n                  <label className={styles.fieldLabel}>Sort Key Values (IN)</label>\n                  <TextArea\n                    rows={3}\n                    placeholder=\"value1&#10;value2&#10;value3\"\n                    value={(sortKeyValues && sortKeyValues.length > 0 ? sortKeyValues : sortKeyValue ? [sortKeyValue] : [])\n                      .join('\\n')}\n                    onChange={onSortKeyValuesChange}\n                  />\n                  <div className={styles.infoText}>\n                    Provide one value per line. Template variables are supported.\n                  </div>\n                </div>\n              ) : (\n                <div className={styles.fieldContainer}>\n                  <label className={styles.fieldLabel}>Sort Key Value</label>\n                  <Input\n                    placeholder=\"1753765220, $timestamp, or use time filtering below\"\n                    value={sortKeyValue || ''}\n                    onChange={onFieldChange('sortKeyValue')}\n                    disabled={resolvedSortOperator === 'in'}\n                  />\n                </div>\n              )}\n            </div>\n            \n            <div className={`${styles.formRow} ${styles.mobileStack}`}>\n              <InlineField label=\"Sort Direction\" labelWidth={20}>\n                <RadioButtonGroup\n                  value={resolvedSortDirection}\n                  onChange={(value) => onSortDirectionChange(value as 'asc' | 'desc')}\n                  options={sortDirectionOptions}\n                />\n              </InlineField>\n            </div>\n            \n            {/* Time Filtering Section */}\n            <div className={`${styles.formRow} ${styles.mobileStack}`}>\n              <div style={{ marginBottom: theme.spacing(1), fontSize: theme.typography.bodySmall.fontSize, color: theme.colors.text.secondary }}>\n                💡 Time filtering automatically applies a WHERE condition to filter results by timestamp field\n              </div>\n              <InlineField label=\"Enable Time Filtering\" labelWidth={20}>\n                <InlineSwitch\n                  value={query.timeFilterEnabled || false}\n                  onChange={(event) => {\n                    const enabled = event.currentTarget.checked;\n                    onChange({ \n                      ...query, \n                      timeFilterEnabled: enabled,\n                      // Set default timestamp field when enabling, clear when disabling\n                      timestampField: enabled ? (query.timestampField || 'timestamp') : undefined,\n                      // Clear time values if disabling\n                      timeFrom: enabled ? query.timeFrom : undefined,\n                      timeTo: enabled ? query.timeTo : undefined\n                    });\n                  }}\n                />\n              </InlineField>\n            </div>\n            \n            {query.timeFilterEnabled && (\n              <>\n                <div className={`${styles.formRow} ${styles.mobileStack}`}>\n                  <div className={styles.fieldContainer}>\n                    <label className={styles.fieldLabel}>Timestamp Field Name</label>\n                    <Input \n                      placeholder=\"timestamp\" \n                      value={query.timestampField || 'timestamp'} \n                      onChange={(e: ChangeEvent<HTMLInputElement>) => {\n                        onChange({ ...query, timestampField: e.target.value || 'timestamp' });\n                      }}\n                    />\n                  </div>\n                </div>\n                \n                <div className={`${styles.formRow} ${styles.mobileStack}`}>\n                  <div className={styles.fieldContainer}>\n                    <label className={styles.fieldLabel}>From Date/Time</label>\n                    <DateTimePicker\n                      date={query.timeFrom ? dateTime(query.timeFrom) : dateTime().subtract(24, 'hours')}\n                      onChange={(newTime?: DateTime) => {\n                        if (newTime) {\n                          onChange({ ...query, timeFrom: newTime.toISOString() });\n                        }\n                      }}\n                    />\n                  </div>\n                  \n                  <div className={styles.fieldContainer}>\n                    <label className={styles.fieldLabel}>To Date/Time</label>\n                    <DateTimePicker\n                      date={query.timeTo ? dateTime(query.timeTo) : dateTime()}\n                      onChange={(newTime?: DateTime) => {\n                        if (newTime) {\n                          onChange({ ...query, timeTo: newTime.toISOString() });\n                        }\n                      }}\n                    />\n                  </div>\n                </div>\n              </>\n            )}\n            \n            {/* Limit and Output Format Row */}\n            <div className={`${styles.formRow} ${styles.mobileStack}`}>\n              <div className={styles.smallFieldContainer}>\n                <label className={styles.fieldLabel}>Limit</label>\n                <Input \n                  type=\"number\" \n                  placeholder=\"100\" \n                  value={limit || 100} \n                  onChange={onLimitChange} \n                />\n              </div>\n              \n              <div className={styles.fieldContainer}>\n                <label className={styles.fieldLabel}>Output Format</label>\n                <Select\n                  value={outputFormatOptions.find(opt => opt.value === outputFormat)}\n                  options={outputFormatOptions}\n                  onChange={onOutputFormatChange}\n                />\n              </div>\n            </div>\n\n            {/* Primary Action Buttons */}\n            <div className={styles.buttonGroup}>\n              <Button \n                className={styles.testQueryButton}\n                variant=\"primary\" \n                size=\"md\" \n                icon=\"play\"\n                disabled={isTestingQuery}\n                onClick={testQuery}\n              >\n                {isTestingQuery ? 'Executing Query...' : 'Run Query'}\n              </Button>\n              \n              <Button \n                variant=\"secondary\" \n                size=\"md\" \n                icon=\"search\"\n                onClick={generateFieldMappingsFromData}\n                disabled={isDiscovering}\n              >\n                {isDiscovering ? 'Discovering Fields...' : 'Discover Schema'}\n              </Button>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Advanced Field Mapping */}\n      <div>\n        <Button\n          variant=\"secondary\"\n          size=\"sm\"\n          icon={showAdvanced ? \"angle-down\" : \"angle-right\"}\n          fill=\"outline\"\n          onClick={() => setShowAdvanced(!showAdvanced)}\n        >\n          Advanced Field Mapping ({(fieldMappings || []).length} fields)\n        </Button>\n      </div>\n\n      {showAdvanced && (\n        <div className={styles.advancedSection}>\n          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '16px' }}>\n            <h4 style={{ margin: 0 }}>Field Mappings</h4>\n            <div style={{ display: 'flex', gap: '8px' }}>\n              <Button variant=\"secondary\" size=\"sm\" icon=\"plus\" onClick={addFieldMapping}>\n                Add Field\n              </Button>\n              <Button \n                variant=\"primary\" \n                size=\"sm\" \n                icon=\"check\"\n                onClick={applyFieldMappings}\n                disabled={(fieldMappings || []).length === 0}\n              >\n                Apply Mappings\n              </Button>\n            </div>\n          </div>\n\n          {showSuccessMessage && (\n            <div className={styles.successMessage}>\n              ✅ Field mappings applied successfully! Check the results below.\n            </div>\n          )}\n\n          {(fieldMappings || []).map((mapping, index) => (\n            <div key={index} className={styles.fieldMappingCard}>\n              <div className={styles.responsiveGrid}>\n                <div className={styles.fieldContainer}>\n                  <label className={styles.fieldLabel}>Field Name</label>\n                  <Input\n                    value={mapping.fieldName}\n                    onChange={(e: ChangeEvent<HTMLInputElement>) => updateFieldMapping(index, 'fieldName', e.target.value)}\n                    placeholder=\"Display name (e.g., 'User ID')\"\n                  />\n                </div>\n                \n                <div className={styles.fieldContainer}>\n                  <label className={styles.fieldLabel}>Source Path</label>\n                  <Input\n                    value={mapping.sourcePath}\n                    onChange={(e: ChangeEvent<HTMLInputElement>) => updateFieldMapping(index, 'sourcePath', e.target.value)}\n                    placeholder=\"Data path (e.g., 'user.id', 'items[0].name')\"\n                  />\n                </div>\n                \n                <div className={styles.smallFieldContainer}>\n                  <label className={styles.fieldLabel}>Data Type</label>\n                  <Select\n                    value={dataTypeOptions.find(opt => opt.value === mapping.dataType)}\n                    options={dataTypeOptions}\n                    onChange={(value) => updateFieldMapping(index, 'dataType', value.value || 'string')}\n                  />\n                </div>\n                \n                <div className={styles.fieldContainer}>\n                  <label className={styles.fieldLabel}>Transform</label>\n                  <Input\n                    value={mapping.transformation || ''}\n                    onChange={(e: ChangeEvent<HTMLInputElement>) => updateFieldMapping(index, 'transformation', e.target.value)}\n                    placeholder=\"parseFloat, timestamp\"\n                  />\n                </div>\n                \n                <div style={{ display: 'flex', alignItems: 'flex-end', marginTop: '20px' }}>\n                  <Button\n                    variant=\"destructive\"\n                    size=\"sm\"\n                    icon=\"trash-alt\"\n                    onClick={() => removeFieldMapping(index)}\n                  />\n                </div>\n              </div>\n            </div>\n          ))}\n\n          {(fieldMappings || []).length === 0 && (\n            <Alert severity=\"info\" title=\"No field mappings configured\">\n              <strong>Quick Start:</strong>\n              <br/>1. Click <strong>&quot;Discover Schema&quot;</strong> above to automatically analyze your table\n              <br/>2. Or manually add field mappings using the <strong>&quot;Add Field&quot;</strong> button\n              <br/>3. Click <strong>&quot;Apply Mappings&quot;</strong> to test your configuration\n              <br/><br/>\n              <strong>Field Mapping Examples:</strong>\n              <br/>• Field Name: &quot;User ID&quot; → Source Path: &quot;userId&quot; → Type: &quot;string&quot;\n              <br/>• Field Name: &quot;Location&quot; → Source Path: &quot;geo.coordinates&quot; → Type: &quot;json&quot;\n              <br/>• Field Name: &quot;Score&quot; → Source Path: &quot;metrics.score&quot; → Type: &quot;number&quot;\n            </Alert>\n          )}\n\n        </div>\n      )}\n    </div>\n  );\n}\n","import { DataSourcePlugin } from '@grafana/data';\nimport { FluvioDataSourceOptions, DynamoQuery } from './types';\nimport { DataSource } from './datasource';\nimport { ConfigEditor } from './components/ConfigEditor';\nimport { QueryEditor } from './components/QueryEditor';\n\nexport const plugin = new DataSourcePlugin<DataSource, DynamoQuery, FluvioDataSourceOptions>(DataSource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor);\n"],"names":["module","exports","__WEBPACK_EXTERNAL_MODULE__7__","__WEBPACK_EXTERNAL_MODULE__89__","__WEBPACK_EXTERNAL_MODULE__269__","__WEBPACK_EXTERNAL_MODULE__308__","__WEBPACK_EXTERNAL_MODULE__531__","__WEBPACK_EXTERNAL_MODULE__781__","__WEBPACK_EXTERNAL_MODULE__959__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","p","slice","lastIndexOf","DEFAULT_QUERY","limit","outputFormat","fieldMappings","discoverSchema","timeFilterEnabled","timestampField","queryMode","partitionKeyMode","sortKeyOperator","sortDirection","DataSource","DataSourceWithBackend","getDefaultQuery","app","filterQuery","query","partiql","table","applyTemplateVariables","scopedVars","filters","__from","__to","timeFrom","Date","toISOString","timeTo","variables","fromUnix","toUnix","fromIso","toIso","this","resolveTimeRange","toString","__fromIso","__toIso","__interval","__interval_ms","interpolatedTimestampField","templateSrv","replace","effectiveTimeField","quotedTimeField","formatPartiqlIdentifier","timeFilterValue","__timeFilter","partitionKeyName","partitionKeyValues","map","filter","partitionKeyValue","sortKeyName","sortKeyValue","sortKeyRangeStart","sortKeyRangeEnd","sortKeyValues","mapping","sourcePath","fieldName","now","defaultFrom","defaultTo","fromMs","toMs","coerceToMillis","from","Math","min","to","max","floor","candidate","Number","isFinite","normalizeEpoch","trimmed","trim","numeric","isNaN","parsed","parse","time","getTime","toMillis","millis","valueOf","valueOfResult","iso","identifier","test","split","segment","join","getVariables","v","name","constructor","instanceSettings","super","getTemplateSrv","console","error","warn","AWS_REGIONS","label","extractFieldPaths","prefix","paths","traverse","current","currentPath","Array","isArray","length","arrayPath","keys","forEach","newPath","push","path","type","determineDataType","getValueByPath","includes","arrayKey","indexStr","index","parseInt","plugin","DataSourcePlugin","setConfigEditor","options","onOptionsChange","styles","theme","container","css","configSection","colors","background","secondary","border","weak","shape","borderRadius","spacing","formRow","fieldContainer","fieldLabel","typography","bodySmall","fontSize","fontWeightMedium","text","primary","alertSection","sectionHeader","h5","fontWeight","credentialsInfo","permissionsInfo","info","transparent","canvas","fontFamilyMonospace","getConfigStyles","useTheme2","jsonData","secureJsonFields","secureJsonData","onSecretChange","field","e","target","onResetSecret","isConfigured","region","accessKey","secretKey","div","className","Alert","severity","title","style","marginTop","Button","variant","size","onClick","Select","placeholder","find","onChange","Input","endpoint","SecretInput","onReset","strong","br","code","setQueryEditor","onRunQuery","datasource","responsiveGrid","smallFieldContainer","keyValueRow","equalSign","querySection","mobileStack","testQueryButton","main","contrastText","shade","action","disabledBackground","disabledText","buttonGroup","successMessage","success","advancedSection","fieldMappingCard","medium","infoText","getStyles","showAdvanced","setShowAdvanced","useState","isDiscovering","setIsDiscovering","isTestingQuery","setIsTestingQuery","showSuccessMessage","setShowSuccessMessage","showTemplateVariableHelp","setShowTemplateVariableHelp","availableVariables","React","onFieldChange","onLimitChange","onOutputFormatChange","generateFieldMappingsFromData","hasPartiql","Boolean","hasTable","response","schemaQuery","refId","originalQuery","queryRequest","targets","range","dateTime","subtract","raw","interval","intervalMs","maxDataPoints","timezone","CoreApp","Explore","requestId","startTime","queryObservable","firstValueFrom","data","schemaFrame","discoveredMappings","fields","fieldPathField","f","dataTypeField","sampleValueField","values","i","fieldPath","dataType","cleanFieldName","updatedQuery","alert","fallbackMappings","discoveredFields","rawJsonField","sampleSize","allFieldPaths","Set","rawJson","parsedData","JSON","add","sortedPaths","sort","maxFields","firstRecord","sampleValue","pop","tryFallbackSchemaAnalysis","fallbackError","message","testQuery","testQueryData","setTimeout","updateFieldMapping","updatedMappings","resolvedPartitionMode","resolvedSortOperator","resolvedSortDirection","outputFormatOptions","sortOperatorOptions","dataTypeOptions","RadioButtonGroup","onBlur","validation","queryText","warnings","isValid","partiqlValidation","validatePartiQLQuery","referencedVariables","match","startsWith","builtInVariables","availableVarNames","varName","validateTemplateVariables","warning","icon","fill","h4","margin","marginBottom","display","flexWrap","gap","variable","padding","opt","InlineField","labelWidth","InlineSwitch","event","enabled","currentTarget","checked","disabled","alignSelf","discoveryQuery","span","mode","seedValues","onPartitionModeChange","TextArea","rows","selection","nextOperator","updated","menuShouldPortal","onSortDirectionChange","color","DateTimePicker","date","newTime","justifyContent","alignItems","transformation","_","removeFieldMapping"],"sourceRoot":""}