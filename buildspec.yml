version: 0.2

# AWS CodeBuild specification for Grafana + Custom Plugins
# Compute: general1.medium (7GB RAM, 4 vCPUs)
# Target: Amazon Linux 2023 EC2 (linux/amd64)

phases:
  install:
    runtime-versions:
      nodejs: 20
      golang: 1.22
    commands:
      - echo "Installing build dependencies..."
      - echo "Installing system build tools for Grafana backend (auto-detecting package manager)..."
      - |
        if command -v dnf >/dev/null 2>&1; then
          dnf install -y gcc gcc-c++ make git fontconfig fontconfig-devel pkgconf-pkg-config sqlite-devel pam-devel
        elif command -v yum >/dev/null 2>&1; then
          yum install -y gcc gcc-c++ make git fontconfig fontconfig-devel pkgconfig sqlite-devel pam-devel
        elif command -v apt-get >/dev/null 2>&1; then
          apt-get update -y
          apt-get install -y gcc g++ make git fontconfig libfontconfig1-dev pkg-config libsqlite3-dev libpam0g-dev
        else
          echo "Unsupported build image: no known package manager found" >&2
          exit 1
        fi
      - npm install -g yarn@1.22.22
      - echo "Verifying installed tools..."
      - node --version
      - yarn --version
      - go version
      - gcc --version
      - make --version
      
  pre_build:
    commands:
      - echo "Pre-build phase started"
      - echo "Current directory:" && pwd
      - echo "Available memory:" && free -h
      - echo "Unsetting NODE_OPTIONS to avoid --experimental-strip-types error"
      - unset NODE_OPTIONS
      
  build:
    commands:
      - echo "===== Building Main Grafana Application ====="
      - cd metrics-dashboard-dev
      # Build Grafana Backend Binaries
      - echo "Downloading Go dependencies..."
      - go mod download
      - echo "Building Grafana backend binaries for linux/amd64..."
      - mkdir -p bin/linux-amd64
      - echo "Building grafana-server..."
      - GOMAXPROCS=2 GOGC=off GOOS=linux GOARCH=amd64 CGO_ENABLED=1 go build -v -o bin/linux-amd64/grafana-server ./pkg/cmd/grafana-server 2>&1 || (echo "grafana-server build failed" && exit 1)
      - echo "Building grafana-cli..."
      - GOMAXPROCS=2 GOGC=off GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -v -o bin/linux-amd64/grafana-cli ./pkg/cmd/grafana-cli 2>&1 || (echo "grafana-cli build failed" && exit 1)
      - echo "Building grafana..."
      - GOMAXPROCS=2 GOGC=off GOOS=linux GOARCH=amd64 CGO_ENABLED=1 go build -v -o bin/linux-amd64/grafana ./pkg/cmd/grafana 2>&1 || (echo "grafana build failed" && exit 1)
      - ls -lh bin/linux-amd64/
      - echo "✓ Backend binaries built successfully"
      
      # Build Grafana Frontend
      - echo "Installing Grafana dependencies..."
      - YARN_ENABLE_GLOBAL_CACHE=0 yarn install --frozen-lockfile --network-timeout 300000
      - echo "Building Grafana frontend..."
      - YARN_ENABLE_GLOBAL_CACHE=0 yarn build
      - echo "✓ Grafana frontend completed"
      - cd ..
      
      - echo "===== Building DynamoDB Datasource Plugin ====="
      - cd Plugins/fluvio-connect-dynamodb
      - echo "Installing plugin dependencies..."
      - if [ -f package-lock.json ]; then npm ci --no-audit --no-fund; else npm install --no-audit --no-fund; fi
      - echo "Building backend (Go)..."
      - GOMAXPROCS=2 GOGC=off GOOS=linux GOARCH=amd64 go build -o gpx_dynamodb_datasource_linux_amd64 -v ./pkg
      - echo "Building frontend..."
      - npm run build
      - test -d dist || (echo "Missing dist/ output for DynamoDB datasource" && exit 1)
      - echo "DynamoDB datasource plugin build completed"
      - cd ../..
      
      - echo "===== Building Upload Panel Plugin ====="
      - cd Plugins/fluvio-fluviodynamodbupload-panel
      - echo "Installing panel dependencies..."
      - YARN_ENABLE_GLOBAL_CACHE=0 yarn install --frozen-lockfile --network-timeout 300000
      - echo "Building panel..."
      - YARN_ENABLE_GLOBAL_CACHE=0 yarn build
      - test -d dist || (echo "Missing dist/ output for upload panel" && exit 1)
      - echo "Upload panel plugin build completed"
      - cd ../..
      
      - echo "===== Copying Plugins to Grafana ====="
      - PLUGIN_DIR="${CODEBUILD_SRC_DIR:-$PWD}/metrics-dashboard-dev/data/plugins" && mkdir -p "$PLUGIN_DIR"
      - echo "Copying DynamoDB datasource..."
      - rm -rf "$PLUGIN_DIR/fluvio-connect-dynamodb"
      - cp -r Plugins/fluvio-connect-dynamodb/dist "$PLUGIN_DIR/fluvio-connect-dynamodb"
      - cp Plugins/fluvio-connect-dynamodb/gpx_dynamodb_datasource_linux_amd64 "$PLUGIN_DIR/fluvio-connect-dynamodb/"
      - echo "Copying Upload panel..."
      - rm -rf "$PLUGIN_DIR/fluvio-fluviodynamodbupload-panel"
      - cp -r Plugins/fluvio-fluviodynamodbupload-panel/dist "$PLUGIN_DIR/fluvio-fluviodynamodbupload-panel"
      
  post_build:
    commands:
      - echo "===== Build Summary ====="
      - echo "Build completed successfully at $(date)"
      - echo "Grafana version:" && cat metrics-dashboard-dev/package.json | grep version | head -1
      - echo "Installed plugins:"
      - PLUGIN_DIR="${CODEBUILD_SRC_DIR:-$PWD}/metrics-dashboard-dev/data/plugins" && if [ -d "$PLUGIN_DIR" ]; then ls -lh "$PLUGIN_DIR/"; else echo "No plugins copied; directory missing at $PLUGIN_DIR"; fi
      - echo "DynamoDB plugin contents:"
      - PLUGIN_DIR="${CODEBUILD_SRC_DIR:-$PWD}/metrics-dashboard-dev/data/plugins" && if [ -d "$PLUGIN_DIR/fluvio-connect-dynamodb" ]; then ls -lh "$PLUGIN_DIR/fluvio-connect-dynamodb/"; else echo "DynamoDB plugin directory missing at $PLUGIN_DIR/fluvio-connect-dynamodb"; fi
      - echo "Upload panel contents:"
      - PLUGIN_DIR="${CODEBUILD_SRC_DIR:-$PWD}/metrics-dashboard-dev/data/plugins" && if [ -d "$PLUGIN_DIR/fluvio-fluviodynamodbupload-panel" ]; then ls -lh "$PLUGIN_DIR/fluvio-fluviodynamodbupload-panel/"; else echo "Upload panel directory missing at $PLUGIN_DIR/fluvio-fluviodynamodbupload-panel"; fi
      - echo "===== Preparing artifacts ====="

artifacts:
  files:
    - '**/*'
  base-directory: '.'
  name: metrics-dashboard-$(date +%Y%m%d-%H%M%S)

cache:
  paths:
    - 'metrics-dashboard-dev/node_modules/**/*'
    - 'Plugins/fluvio-connect-dynamodb/node_modules/**/*'
    - 'Plugins/fluvio-fluviodynamodbupload-panel/node_modules/**/*'
    - '/root/.cache/go-build/**/*'
